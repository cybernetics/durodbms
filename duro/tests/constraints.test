#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test constraints
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

source [file dirname [info script]]/setup.tcl

test tconstraint {tuple constraint} -setup $SETUP -body {
    set dbenv [duro::env open [configure -tmpdir]/dbenv]

    # Create Database
    duro::db create $dbenv TEST

    set tx [duro::begin $dbenv TEST]

    duro::table create T1 {
       {A integer}
       {B integer}
       {C integer}
    } {{A}} $tx

    # Create 'tuple' constraint
    duro::constraint create C1 {is_empty(T1 WHERE B>100)} $tx

    # Must succeed
    duro::insert T1 {A 1 B 1 C 1} $tx

    # Must fail
    if {![catch {
        duro::insert T1 {A 2 B 200 C 1} $tx
    }]} {
        error "insert should have failed, but succeded"
    }

    set code [lindex $errorCode 1]
    if {![string match "predicate_violation_error(*C1*)" $code]} {
        error "wrong error code: $code"
    }

    # Must succeed
    duro::update T1 {A = 1} C 200 $tx

    # Must succeed
    duro::update T1 {A = 1} B 100 $tx

    # Must fail
    if {![catch {
        duro::update T1 {A = 1} B 200 $tx
    }]} {
        error "update should have failed, but succeded"
    }

    set code [lindex $errorCode 1]
    if {![string match "predicate_violation_error(*C1*)" $code]} {
        error "wrong error code: $code"
    }

    duro::commit $tx
    
    duro::env close $dbenv
}

test constraints {table and database constraints} -setup $SETUP -body {
    set dbenv [duro::env open [configure -tmpdir]/dbenv]

    # Create Database
    duro::db create $dbenv TEST

    set tx [duro::begin $dbenv TEST]
    
    duro::table create T1 {
       {A integer}
       {B integer}
    } {{A}} $tx

    duro::table create T2 {
       {B integer}
       {C integer}
    } {{B}} $tx

    # Create foreign key constraint
    duro::constraint create C2 {is_empty(T1 semiminus T2)} $tx
    
    duro::commit $tx

    # Close DB environment
    duro::env close $dbenv

    # Reopen DB environment
    set dbenv [duro::env open [configure -tmpdir]/dbenv]
    
    set tx [duro::begin $dbenv TEST]
    
    # Must succeed
    duro::insert T2 {B 1 C 1} $tx

    # Must succeed
    duro::insert T1 {A 1 B 1} $tx
    
    # Must fail
    if {![catch {
        duro::insert T1 {A 2 B 2} $tx
    }]} {
        error "insert should have failed, but succeded"
    }

    set code [lindex $errorCode 1]
    if {![string match "predicate_violation_error(*C2*)" $code]} {
        error "wrong error code: $code"
    }
    
    # Must fail
    if {![catch {
        duro::delete T2 {B = 1} $tx
    }]} {
        error "delete should have failed, but succeded"
    }

    set code [lindex $errorCode 1]
    if {![string match "predicate_violation_error(*C2*)" $code]} {
        error "wrong error code: $code"
    }
    
    duro::table create T3 {
       {A integer}
       {B integer}
    } {{A}} $tx
    
    duro::insert T3 {A 1 B 1} $tx
    duro::insert T3 {A 2 B 1} $tx
    
    duro::constraint create C3 {SUM(T3, B) < 4} $tx

    duro::update T3 {A = 1} B 2 $tx
    
    # Must fail
    if {![catch {
        duro::insert T3 {A 3 B 3} $tx
    }]} {
        error "insert should have failed, but succeded"
    }
    
    set code [lindex $errorCode 1]
    if {![string match "predicate_violation_error(*C3*)" $code]} {
        error "wrong error code: $code"
    }
    
    duro::commit $tx
    
    duro::env close $dbenv
}

cleanupTests

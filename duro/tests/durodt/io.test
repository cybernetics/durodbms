#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

#
# Test scalar definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

test std_output {Standard output} -match regexp -body {
    exec $testdir/../../dli/durodt << {
        io.put('Test ');
        io.put(3);
        io.put(1.7);
        io.put(TRUE);
        io.put(X'446f');
        io.put(X'');

        io.put_line('Duro');
    }
} -result {Test 31.70*TRUEDoDuro
}

test file_output {File Output} -match regexp -body {
    exec $testdir/../../dli/durodt << {
        VAR is io.iostream_id;

        io.open(is, 'out.txt', 'w');

        io.put(is, 'Test ');
        io.put(is, 3);
        io.put(is, 1.7);
        io.put(is, TRUE);

        io.put_line(is, 'Duro');

        io.put(is, X'4464'); io.put_line('');

        io.close(is);
    }
    set f [open out.txt r]
    puts [read $f]
    close $f

    file delete -force out.txt
} -output {Test 31.70*TRUEDuro
Dd
}

test stdout_output {stdout output} -match regexp -body {
    exec $testdir/../../dli/durodt << {
        io.put(io.stdout, 'Test ');
        io.put(io.stdout, 3);
        io.put(io.stdout, 1.7);
        io.put(io.stdout, TRUE);
        io.put(io.stdout, X'444f');

        io.put_line(io.stdout, 'Duro');
    }
} -result {Test 31.70*TRUEDODuro
}

test stderr_output {stderr output} -match regexp -body {
    exec $testdir/../../dli/durodt << {
        io.put(io.stderr, 'Test ');
        io.put(io.stderr, 3);
        io.put(io.stderr, 1.7);
        io.put(io.stderr, TRUE);

        io.put_line(io.stderr, 'Duro');
    } 2> out.txt
    set f [open out.txt r]
    puts [read $f]
    close $f

    file delete -force out.txt
} -output {Test 31.70*TRUEDuro
}

test file_input {File input} -body {
    set f [open in.txt w]
    puts $f {Duro%$-}
    puts $f { xy= }
    close $f    

    set res [exec $testdir/../../dli/durodt << {
        VAR is io.iostream_id;

        io.open(is, 'in.txt', 'r');
        VAR line string;
        io.get_line(is, line);
        io.put_line(line);
        io.get_line(is, line);
        io.put_line(line);
        io.put(io.eof(is)); io.put_line('');
        io.get_line(is, line);
        io.put_line(line);
        io.put(io.eof(is)); io.put_line('');
        io.close(is);

        io.open(is, 'in.txt', 'r');
        VAR bin binary;
        io.read(is, bin, 7);
        io.put(bin); io.put_line('');

        io.seek(is, 4);
        io.read(is, bin, 2);
        io.close(is);
        io.put(bin); io.put_line('');
    }]
    file delete -force in.txt
    return $res
} -result {Duro%$-
 xy= 
FALSE

TRUE
Duro%$-
%$
}

test tmpfile {temporary file} -match regexp -body {
    exec $testdir/../../dli/durodt << {
        var tmpf init io.tmpfile();
        io.put_line('Abc %&/');
        io.put_line(' zzz');
        io.seek(tmpf, 0);
        var l string;
        while not io.eof(tmpf);
            io.get_line(tmpf, l);
            io.put_line(l);
        end while;
        io.close(tmpf);
    }
} -result {Abc %&/
 zzz
}

cleanupTests

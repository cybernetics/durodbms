#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test tuple definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

set ::DBSETUP {
    file delete -force dbenv
    exec $testdir/../../dli/durodt << {
        create_env('dbenv');
        create_db('D');
    }
}

test ptarray {array from private table} -body {
    exec $testdir/../../dli/durodt << {
        var r private init relation { tuple {i 1, c 'foo'}, tuple {i 2, c 'foo'},
        		tuple {i 3, c 'bar'} } key {i};
        var a array tuple same_heading_as(r);

        load a from r where c = 'foo' order();
        println(a[0].c);

        load a from r order(c asc, i desc);
        println(a[0].i);
        println(a[1].i);
        println(a[2].i);

        load a from r order(c desc, i asc);

        drop var r;

        println(a[0].i);
        println(a[1].i);
        println(a[2].i);

        println(length(a));
        
        var i same_type_as(length(a));
        
        drop var a;
    }
} -result {foo
3
2
1
1
2
3
3
}

test ops {array operator} -setup $DBSETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('', 'dbenv');
        current_db := 'D';

        begin transaction;

        operator first(a array tuple{i integer}) returns tuple{i integer};
	        return a[0];
        end operator;

        operator acopy(dst array tuple{i integer}, src array tuple{i integer}) updates {a};
	        dst := src;
        end operator;

        var r private init relation { tuple {i 1}, tuple {i 2},
        		tuple {i 3} } key {i};
        var a array tuple {i integer};

        load a from r order (i asc);
        var t tuple {i integer};
        t := first(a);

        println(t.i);

        var b array tuple {i integer};
        acopy(b, a);

        println(b[2].i);

        drop var a;
        drop var b;

        commit;
    }
} -result {1
3
}

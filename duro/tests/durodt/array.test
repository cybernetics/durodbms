#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test tuple definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

set ::DBSETUP {
    removeDirectory dbenv
    makeDirectory dbenv
    cd $::tcltest::temporaryDirectory
    exec $testdir/../../dli/durodt << {
        CREATE_ENV('dbenv');
        CREATE_DB('D');
    }
}

set ::CLEANUP {
    removeDirectory dbenv
}

test arraysel {array selectors and index_of} -body {
    exec $testdir/../../dli/durodt << {
	    -- without type 
	    var a1 init array(2, 4);
	    put(length(a1)); put_line('');
	    put(a1[0]); put_line('');
	    put(a1[1]); put_line('');

        put(index_of(a1, 4)); put_line('');
        put(index_of(a1, 0)); put_line('');

	    -- with type
	    var a2 init array STRING ('relational');
	    put(length(a2)); put_line('');
	    put(a2[0]); put_line('');

	    -- with type and without arguments
	    a1 := array int();
	    put(length(a1)); put_line('');
	    
	    -- array of tuple without type
	    var at1 init array(tup{i 200});
	    put(length(at1)); put_line('');
	    put(at1[0].i); put_line('');

	    -- array of tuple with type
	    var at2 init array tup{s STRING} (tup{s 'A'}, tup{s 'Ilsebill'});
	    put(length(at2)); put_line('');
	    put(at2[0].s); put_line('');
	    put(at2[1].s); put_line('');
	    
	    -- type mismatch
	    try
	        var ae init array int ('S');
	    catch type_mismatch_error;
	        put_line('type mismatch 1');
	    end try;
	    try
	        var ae init array tup{i int} (tup{i 1}, tup{i 1, j 2});
	    catch type_mismatch_error;
	        put_line('type mismatch 2');
	    end try;
	    
	    -- n-th element of selector
	    put_line(array('zero', 'one', 'two')[1]);

        -- catch assignment to selector
        try
            array('zero', 'one', 'two')[1] := 'eins';
        catch err syntax_error;
            put_line('assignment: syntax error');
        end try;
	}
} -result {2
2
4
1
-1
1
relational
0
1
200
2
A
Ilsebill
type mismatch 1
type mismatch 2
one
assignment: syntax error
}    

test ptarray {array from private table} -body {
    exec $testdir/../../dli/durodt << {
        var r private init relation { tuple {i 1, c 'foo'}, tuple {i 2, c 'foo'},
        		tuple {i 3, c 'bar'} } key {i};
        var a array tuple same_heading_as(r);

        load a from r where c = 'foo' order();
        put_line(a[0].c);

        load a from r order(c asc, i desc);
        put(a[0].i); put_line('');
        put(a[1].i); put_line('');
        put(a[2].i); put_line('');

        load a from r order(c desc, i asc);

        drop var r;

        put(a[0].i); put_line('');
        put(a[1].i); put_line('');
        put(a[2].i); put_line('');

        put(length(a)); put_line('');
        
        var i same_type_as(length(a));
        
        drop var a;
    }
} -result {foo
3
2
1
1
2
3
3
}

test ops {operators with array arguments} -setup $DBSETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        CONNECT('dbenv');
        CURRENT_DB := 'D';

        begin transaction;

        operator first(a array tuple{i int}) returns tuple{i int};
	        return a[0];
        end operator;

        operator acopy(dst array tuple{i int}, src array tuple{i int}) updates {dst};
	        dst := src;
        end operator;

        var r private init relation { tuple {i 1}, tuple {i 2},
        		tuple {i 3} } key {i};
        var a array tuple {i int};

        load a from r order (i asc);
        var t tuple {i int};
        t := first(a);

        put(t.i); put_line('');

        var b array tuple {i int};
        acopy(b, a);

        put(b[2].i); put_line('');

        drop var a;
        drop var b;

        commit;
    }
} -result {1
3
}

test retops {operator returning array} -setup $DBSETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        CONNECT('dbenv');
        CURRENT_DB := 'D';

        begin transaction;

        operator rest(a array int) returns array int;
            var result array int;
            length(result) := length(a) - 1;

            var i int;
            for i := 0 to length(result) - 1;
                result[i] := a[i + 1];
            end for;

            return result;
        end operator;

        var a array int init array(1, 3, 5);
        var b array int;
        b := rest(a);
        var i int;
        for i := 0 to length(b) - 1;
            put(b[i]); put_line('');
        end for;

        commit;
    }
} -result {3
5
}

test array_utype {type with array-valued component} -setup $DBSETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        CONNECT('dbenv');
        CURRENT_DB := 'D';

        begin transaction;
        
        type path possrep { components array STRING } init path(array string());
        
        commit;
    }
}

test resize {array resize} -body {
    exec $testdir/../../dli/durodt << {
        var a array int;

        put(length(a)); put_line('');

        length(a) := 5;
        put(length(a)); put_line('');
        a[4] := 6;
        put(a[4]); put_line('');
        put(a[3]); put_line('');

        length(a) := 6;
        put(length(a)); put_line('');
        put(a[5]); put_line('');
        a[5] := -1;
        put(a[5]); put_line('');

        length(a) := 3;
        put(length(a)); put_line('');
        put(a[2]); put_line('');
        a[2] := 43;
        put(a[2]); put_line('');            
    }
} -result {0
5
6
0
6
0
-1
3
0
43
}
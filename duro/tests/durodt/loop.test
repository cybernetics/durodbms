#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test scalar definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

set ::DBSETUP {
    removeDirectory dbenv
    makeDirectory dbenv
    cd $::tcltest::temporaryDirectory
    exec $testdir/../../dli/durodt << {
        CREATE_ENV('dbenv');
        CREATE_DB('D');
    }
}

set ::CLEANUP {
    removeDirectory dbenv
}

test for {FOR} -setup $DBSETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        var i INTEGER;
    
        for i := 1 to 3;
            put(i); put_line('');
        end for;

        for i := -1 to 1;
            put(i); put_line('');
        end for;

        for i := 0 to -1;
            put_line('Must not appear');
            exit();
        end for;
    }
} -result {1
2
3
-1
0
1
}

test leave {FOR, WHILE, LEAVE} -setup $DBSETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        CURRENT_DB := 'D';
        begin transaction;

        var i INTEGER;
        var j INTEGER;

        outer_loop: for i := 0 to 10;
            j := 0;
            while j < 10;
                if i = 2 and j = 3 then
                    leave outer_loop;
                end if;
                j := j + 1;
            end while;
        end for;

        put(i); put_line('');
        put(j); put_line('');

        operator lop() returns STRING;
            var i INTEGER;
            var j INTEGER;

            outer_loop: while i < 10;
                for j := 0 to 10;
                    if i = 2 and j = 3 then
                        leave outer_loop;
                    end if;
                end for;
                i := i + 1;
            end while;
            return CAST_AS_STRING(i) || ',' || CAST_AS_STRING(j);
        end operator;
        
        put_line(lop());

        commit;

        -- LEAVE without label

        for i := 1 to 10;
            if i = 5 then
                leave;
            end if;
        end for;
        put_line(cast_as_string(i));

        i := 10;
        while true;
            i := i - 1;
            if i = 4 then
                leave;
            end if;
        end while;            
        put_line(cast_as_string(i));

        -- Dropping FOR loop variable
        try
            for i:= 1 to 5;
                drop var i;
             end for;
        -- Both errors are acceptable
        catch err in_use_error;
             put_line('dropping FOR variable: error caught');
        catch err name_error;
             put_line('dropping FOR variable: error caught');
        end try;
    }
} -result {2
3
2,3
5
4
dropping FOR variable: error caught
}

test leave_op {Unmatched LEAVE in operator} -setup $DBSETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        CURRENT_DB := 'D';
        begin tx;

        operator leave_upd_op() updates {};
            leave l;
        end operator;

        operator leave_ro_op() returns INTEGER;
            leave l;
        end operator;

        try
		    -- Must fail
		    var i INTEGER;
		    l: for i:= 0 to 9;
		        leave_upd_op();
		    end for;
		catch err SYNTAX_ERROR;
		    put_line("syntax error caught: " || THE_MSG(err));
		end try;

        try
		    -- Must fail
		    var i INTEGER;
		    var v INTEGER;
		    l: for i:= 0 to 9;
		        v := leave_ro_op();
		    end for;
		catch err SYNTAX_ERROR;
		    put_line("syntax error caught: " || THE_MSG(err));
		end try;

   }
} -result {syntax error caught: unmatched LEAVE
syntax error caught: unmatched LEAVE
}

test for {FOR .. IN} -body {
    exec $testdir/../../dli/durodt << {
        var pr private init relation{tup{i 1, j 1},tup{i 2, j 20}};

        var t1 tuple{i integer, j integer};
        for t1 in pr order(i asc);
            put(t1.i); put_line('');
        end for;
        for t1 in pr order(i desc);
            put(t1.i); put_line('');
        end for;

        var t2 tuple{i integer};
        for t2 in pr {i} order(i asc);
            put(t2.i); put_line('');
        end for;
        for t2 in pr {i} order(i desc);
            put(t2.i); put_line('');
        end for;

        -- LEAVE with label
        l: for t2 in pr {i} order(i asc);
            put(t2.i); put_line('');
            if t2.i = 1 then
                leave l;
            end if;
        end for;

        -- Dropping FOREACH loop variable
        try
            for t1 in pr order();
                drop var t1;
             end for;
        catch err in_use_error;
             put_line('dropping FOREACH variable: error caught');
        catch err name_error;
             put_line('dropping FOREACH variable: error caught');
        end try;
    }
} -result {1
2
2
1
1
2
2
1
1
dropping FOREACH variable: error caught
}

cleanupTests

#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test scalar definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

set ::DBSETUP {
    file delete -force dbenv
    exec $testdir/../../dli/durodt << {
        create_env('dbenv');
        create_db('D');
    }
}

test for {FOR} -setup $DBSETUP -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        var i integer;
    
        for i := 1 to 3;
            println(i);
        end for;

        for i := -1 to 1;
            println(i);
        end for;

        for i := 0 to -1;
            println('Must not appear');
            exit();
        end for;
    }
} -result {1
2
3
-1
0
1
}

test leave {FOR, WHILE, LEAVE} -setup $DBSETUP -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        current_db := 'D';
        begin transaction;

        var i integer;
        var j integer;

        outer_loop: for i := 0 to 10;
            j := 0;
            while j < 10;
                if i = 2 and j = 3 then
                    leave outer_loop;
                end if;
                j := j + 1;
            end while;
        end for;

        println(i);
        println(j);

        operator lop() returns string;
            var i integer;
            var j integer;

            outer_loop: while i < 10;
                for j := 0 to 10;
                    if i = 2 and j = 3 then
                        leave outer_loop;
                    end if;
                end for;
                i := i + 1;
            end while;
            return string(i) || ',' || string(j);
        end operator;
        
        println(lop());

        commit;
    }
} -result {2
3
2,3
}

test leave_op {Unmatched LEAVE in operator} -setup $DBSETUP -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        current_db := 'D';
        begin tx;

        operator leave_upd_op() updates {};
            leave l;
        end operator;

        operator leave_ro_op() returns integer;
            leave l;
        end operator;

        try
		    -- Must fail
		    var i integer;
		    l: for i:= 0 to 9;
		        leave_upd_op();
		    end for;
		catch err syntax_error;
		    println("syntax error caught: " || the_msg(err));
		end try;

        try
		    -- Must fail
		    var i integer;
		    var v integer;
		    l: for i:= 0 to 9;
		        v := leave_ro_op();
		    end for;
		catch err syntax_error;
		    println("syntax error caught: " || the_msg(err));
		end try;

   }
} -result {syntax error caught: unmatched LEAVE
syntax error caught: unmatched LEAVE
}

cleanupTests

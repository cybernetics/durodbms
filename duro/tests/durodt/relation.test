#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test scalar definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

set ::SETUP {
    removeDirectory dbenv
    makeDirectory dbenv
    cd $::tcltest::temporaryDirectory
    exec $testdir/../../dli/durodt << {
        CREATE_ENV('dbenv');
        CREATE_DB('D');
    }
}

test insert {creating table and inserting tuples} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;
        var r real relation {i INTEGER, d FLOAT, c STRING} key {i};
        insert r relation {} {};

        var a init 1;
        insert r rel {tuple {i a, d 1.0, c 'X'}, tup {i 2, d 1.1, c 'Y'}};

        var s real init r key {i};

        var t init tuple {i 2 + 1, d 1.0, c 'Z'};
        insert r update t {i := i + 1};

        put_line(CAST_AS_STRING(count(r)));
        put_line(CAST_AS_STRING(count(s)));
        put_line((tuple from r where i=2).c);
        commit;
    }
} -result {3
2
Y
}

test invalid_type {invalid (scalar) type for table} -setup $SETUP -match glob -body {
    exec $testdir/../../dli/durodt << {
	    connect('dbenv');
    	current_db := 'D';

	    begin transaction;
    	var ir real INTEGER key {};
    }
}  -returnCodes {1} -result {*type_mismatch_error*}

test private {creating private table and inserting tuples} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        var r private relation {i INTEGER, d FLOAT, c STRING} key {i};
        insert r relation {} {};

        try
            var ir private relation {i INTEGER} key {i};
            var ir private relation {i INTEGER} key {i};
        catch err element_exists_error;
            put_line("double creation caught");
        end try;

        var s private relation {i INTEGER} init relation { tuple {i 1}, tuple {i 2} } key {i};

        var a init 1;
        insert r relation {tuple {i a, d 1.0, c 'X'}, tuple {i 2, d 1.1, c 'Y'}};

        insert r tuple {i 2 + 1, d 1.0, c 'Z'}; 

        update r where i=3 { c:= 'ZZ' };

        delete r where i<>2;

        put(count(r)); put_line('');
        put_line((tuple from r where i=2).c);
        put(sum(s, i)); put_line('');
        drop var r;
        
        -- test invalid relation selector
        try
            var r init relation {a INTEGER} {tuple {a 'x'}};
        catch err type_mismatch_error;
            put_line("type mismatch");
        end try;
        
        put((tuple from relation {a INTEGER} {tuple {a 7}}).a); put_line('');
    }
} -result {double creation caught
1
Y
3
type mismatch
7
}

test ra {relational algebra} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t1 real relation {a INTEGER, b STRING}
        		init relation { tuple {a 1, b 'x'}, tuple {a 2, b 'y'} } key {a};
        var t2 real relation {a INTEGER} key {a};

        insert t2 relation { tuple {a 2}, tuple {a 3} };

        put(with (is := p intersect t2, p := t1 {a}): (tuple from is).a); put_line('');

		put((tuple from relation{tuple{i 1}} join table_dee).i); put_line('');

        var a array tuple{i INTEGER};
        load a from rel{tup{i 1}} union rel{tup{i 2}} order (i asc);
        put(a[0].i); put_line('');
        put(a[1].i); put_line('');
        put_line('');

        var t tuple{i INT};
        foreach t in rel{tup{i 1}} union rel{tup{i 2}} order (i desc);
            put(t.i); put_line('');
        end foreach;

        commit;
    }
} -result {2
1
1
2

2
1
}

test updop {user defined update operators} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        operator defop() updates {};
	        begin transaction;
	        
            var tp init tuple {a 0, b "duro"};
            var r real relation same_heading_as(tp) key {a};

            var v virtual (extend r : {bx := b || 'x'});

            commit;
        end operator;

        operator insop(t relation {b STRING, a INTEGER}) updates {t};
            insert t tuple {a 0, b "duro"};
        end operator;

        defop();
        insop(r);
        put((tuple from v).bx); put_line('');
        commit;
    }
} -result {durox
}

test deedum {TABLE_DEE and TABLE_DUM} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        put(tup from TABLE_DEE); put_line('');
        put(tup from DEE); put_line('');

        put(TABLE_DUM); put_line('');
        put(DUM); put_line('');

        put(tuple from (rel{} {} union table_dee)); put_line('');
        
        connect('dbenv');
        current_db := 'D';

        begin transaction;
        var ev virtual relation {i INTEGER} {};
        commit;

        DISconnect();

        -- Connect again and read virtual table
        connect('dbenv');
        current_db:='D';
        begin tx;
        put(ev); put_line('');
        commit;
    }
} -result {TUPLE { }
TUPLE { }
RELATION { }
RELATION { }
TUPLE { }
RELATION { }
}

test logic {Logic operators} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t real relation {i INTEGER, j INTEGER} key {i, j};

        insert t relation { tuple {i 1, j 1}, tuple {i 1, j 2},
                tuple {i 2, j 1}, tuple {i 2, j 2} };

        var va virtual t where i=1 or j=1;
        var vo virtual t where i=1 and j=1;
        var vx virtual t where i=1 xor j=1;
        
        var a array tuple {i INTEGER, j INTEGER};

        load a from va order(i asc, j asc);
        
        var i INTEGER;
        for i:= 0 to LENGTH(a)-1;
			put(a[i].i);
			put(' ');
			put(a[i].j); put_line('');			
		end for;

		put_line("");

        load a from vo order(i asc, j asc);
        
        for i:= 0 to LENGTH(a)-1;
			put(a[i].i);
			put(' ');
			put(a[i].j); put_line('');			
		end for;

		put_line("");

        load a from vx order(i asc, j asc);

        for i:= 0 to LENGTH(a)-1;
			put(a[i].i);
			put(' ');
			put(a[i].j); put_line('');			
		end for;

        commit;
    }
} -result {1 1
1 2
2 1

1 1

1 2
2 1
}

test aggregate {Aggregate operators} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t real relation {b BOOLEAN} key {b};

		insert t tup {b true};
		insert t tup {b false};

		put(all(t, b)); put_line('');
		put(and(t, b)); put_line('');
		put(any(t, b)); put_line('');
		put(or(t, b)); put_line('');

        commit;
    }
} -result {FALSE
FALSE
TRUE
TRUE
}

test summarize {SUMMARIZE} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t real relation {i INTEGER, j INTEGER} key {i, j};

		insert t tup {i 1, j 0};
		insert t tup {i 1, j 1};
		insert t tup {i 2, j 1};
		insert t tup {i 2, j 2};

		var v virtual SUMMARIZE t PER t {i} ADD (
				SUM(j) AS A_SUM,
		        ALL(j > 0) AS A_ALL,
		        AND(j > 0) AS A_AND,
		        ANY(j > 0) AS A_ANY,
		        OR(j > 0) AS A_OR);

        var arr array tuple same_heading_as (v);

        load arr from v order(i asc);

        var i INTEGER;
        for i:= 0 to LENGTH(arr)-1;
			put(arr[i].A_SUM);			
			put(' ');
			put(arr[i].A_ALL);			
			put(' ');
			put(arr[i].A_AND);
			put(' ');
			put(arr[i].A_ANY);
			put(' ');
			put(arr[i].A_OR); put_line('');
		end for;

        commit;
    }
} -result {1 FALSE FALSE TRUE TRUE
3 TRUE TRUE TRUE TRUE
}

test relrel {table with relation attribute} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t real relation {x INTEGER, a STRING, r relation{s STRING, i INTEGER}} key {x};

		insert t tuple{x 1, a 'hm', r rel{tup{i 5, s 'yo'}}};

		var tp init tuple from (tuple from t).r;

        put(tp.i); put_line('');
        put_line(tp.s);
        commit;
    }
} -result {5
yo
}

test group {GROUP} -body {
    exec $testdir/../../dli/durodt << {
		var gt init rel{tup{i 1, j 1}, tup{i 2, j 2}} group {i, j} as ij;
		put((tuple from gt).ij = rel{tup{i 1, j 1}, tup{i 2, j 2}}); put_line('');
    }
} -result {TRUE
}

test ungroup {UNGROUP} -body {
    exec $testdir/../../dli/durodt << {
		var ugt init rel{
		        tup {st rel{tup{s 'a', t 'b'}, tup{s 'c', t 'd'}}},
		        tup {st rel{tup{s 'e', t 'f'}}}} ungroup st;
		var arr array tuple{s STRING, t STRING};
		load arr from ugt order(s asc);
		put(LENGTH(arr)); put_line('');
		put_line(arr[0].s);
		put_line(arr[0].t);
		put_line(arr[1].s);
		put_line(arr[1].t);
		put_line(arr[2].s);
		put_line(arr[2].t);
    }
} -result {3
a
b
c
d
e
f
}

test sdivide {small DIVIDE} -body {
    exec $testdir/../../dli/durodt << {
        var pizzas private init rel{tup{pizza# 1}, tup{pizza# 2}};
        var condiments private init rel{tup{cond 'salami'},tup{cond 'mushrooms'}};

        try
            var p_c private init rel{tup{pizza# 1, cond 'salami'},
                    tup{pizza 2, cond 'salami'}, tup{pizza 2, cond 'mushrooms'}};
        catch err;
            put_line('error caught');
        end try;

        var p_c private init rel{tup{pizza# 1, cond 'salami'},
                tup{pizza# 2, cond 'salami'}, tup{pizza# 2, cond 'mushrooms'}};
                
        -- Get # of pizza with all condiments
        put((tuple from (pizzas divideby condiments per (p_c))).pizza#); put_line('');
    }
} -result {error caught
2
}

test foreach {FOREACH} -body {
    exec $testdir/../../dli/durodt << {
        var pr private init relation{tup{i 1, j 1},tup{i 2, j 20}};

        var t1 tuple{i integer, j integer};
        foreach t1 in pr order(i asc);
            put(t1.i); put_line('');
        end foreach;
        foreach t1 in pr order(i desc);
            put(t1.i); put_line('');
        end foreach;

        var t2 tuple{i integer};
        foreach t2 in pr {i} order(i asc);
            put(t2.i); put_line('');
        end foreach;
        foreach t2 in pr {i} order(i desc);
            put(t2.i); put_line('');
        end foreach;

        -- LEAVE with label
        l: foreach t2 in pr {i} order(i asc);
            put(t2.i); put_line('');
            if t2.i = 1 then
                leave l;
            end if;
        end foreach;
    }
} -result {1
2
2
1
1
2
2
1
1
}

test index {creating index} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin tx;
        var r real relation {i INTEGER, d FLOAT, c STRING} key {i};
        commit;

        begin tx;
        index r_c for r (c);
        commit;

        begin tx;
        drop index r_c;
        commit;
    }
}

test real_default {public real table with default values} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin tx;
        var r1 real relation {i INTEGER, r FLOAT, c STRING} key {i}
                default {r 1.2, c 'xyz'};
        insert r1 tup {i 5};
        var t1 init tuple from r1;

        var r2 real relation {i INTEGER, r FLOAT, c STRING}
                init rel {tup {i 0, r 1.0, c 'Zz'}}
                key {i} key {c}
                default {r 1.2, c 'xyz'};
        insert r2 tup {i 5};
        var t2 init tuple from (r2 where i=5);

        var r3 real relation {i INTEGER, r FLOAT, c STRING}
                init r2 default {r 1.2, c 'xyz'};
        insert r3 tup {i 6};
        var t3 init tuple from (r3 where i=6);

        commit;

        put(t1.i); put(' ');
        put(cast_as_integer(t1.r * 100.0)); put(' ');
        put(t1.c); put_line('');

        put(t2.i); put(' ');
        put(cast_as_integer(t2.r * 100.0)); put(' ');
        put(t2.c); put_line('');

        put(t3.i); put(' ');
        put(cast_as_integer(t3.r * 100.0)); put(' ');
        put(t3.c); put_line('');
    }
} -result {5 120 xyz
5 120 xyz
6 120 xyz
}

test private_default {private table with default values} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        var r1 private relation {i INTEGER, r FLOAT, c STRING} key {i}
                default {r 1.2, c 'xyz'};
        insert r1 tup {i 5};
        var t1 init tuple from r1;

        var r2 private relation {i INTEGER, r FLOAT, c STRING}
                init rel {tup {i 0, r 1.0, c 'Zz'}}
                key {i} key {c}
                default {r 1.2, c 'xyz'};
        insert r2 tup {i 5};
        var t2 init tuple from (r2 where i=5);

        var r3 private relation {i INTEGER, r FLOAT, c STRING}
                init r2 default {r 1.2, c 'xyz'};
        insert r3 tup {i 6};
        var t3 init tuple from (r3 where i=6);

        put(t1.i); put(' ');
        put(cast_as_integer(t1.r * 100.0)); put(' ');
        put(t1.c); put_line('');

        put(t2.i); put(' ');
        put(cast_as_integer(t2.r * 100.0)); put(' ');
        put(t2.c); put_line('');

        put(t3.i); put(' ');
        put(cast_as_integer(t3.r * 100.0)); put(' ');
        put(t3.c); put_line('');
    }
} -result {5 120 xyz
5 120 xyz
6 120 xyz
}

cleanupTests

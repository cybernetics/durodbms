#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test scalar definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

set ::SETUP {
    file delete -force dbenv
    exec $testdir/../../dli/durodt << {
        create_env('dbenv');
        create_db('D');
    }
}

test insert {creating table and inserting tuples} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('', 'dbenv');
        current_db := 'D';

        begin transaction;
        var r real relation {i integer, d double, c string} key {i};
        insert r relation {};

        var a init 1;
        insert r relation {tuple {i a, d 1.0, c 'X'}, tuple {i 2, d 1.1, c 'Y'}};

        var t init tuple {i 2 + 1, d 1.0, c 'Z'};
        insert r update t {i := i + 1};

        println(string(count(r)));
        println((tuple from r where i=2).c);
        commit;
    }
} -result {3
Y
}

test private {creating private table and inserting tuples} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('', 'dbenv');
        current_db := 'D';

        var r private relation {i integer, d double, c string} key {i};
        insert r relation {};

        var a init 1;
        insert r relation {tuple {i a, d 1.0, c 'X'}, tuple {i 2, d 1.1, c 'Y'}};

        insert r tuple {i 2 + 1, d 1.0, c 'Z'}; 

        println(string(count(r)));
        println((tuple from r where i=2).c);
        drop var r;
    }
} -result {3
Y
}

test updop {user defined update operators}  -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('', 'dbenv');
        current_db := 'D';

        begin transaction;

        operator op() updates {};
	        -- begin transaction;
	        var r real relation {i integer, s string} key {i};
	        
            insert r tuple {i 0, s "duro"};

            var v virtual (extend r add (s || 'x' as sx));

	        -- commit;
        end operator;

        op();
        println((tuple from v).sx);
        commit;
    }
} -result {durox
}

cleanupTests

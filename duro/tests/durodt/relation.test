#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test database tables and relational operators
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

set ::SETUP {
    removeDirectory dbenv
    makeDirectory dbenv
    cd $::tcltest::temporaryDirectory
    exec $testdir/../../dli/durodt << {
        CREATE_ENV('dbenv');
        CREATE_DB('D');
    }
}

set ::CLEANUP {
    removeDirectory dbenv
}

test insert {creating table and inserting tuples} \
            -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;
        var r real relation {i int, d float, c string} key {i};
        commit;

        begin tx;
        insert r tup {i 3, d 1.0, c 'Z'};
        rollback;

        begin tx;
        insert r tup {i 3, d 1.0, c 'Z'};

        insert r relation {} {}; -- !! ?

        var a init 1;
        insert r rel {tuple {i a, d 1.0, c 'X'}, tup {i 2, d 1.1, c 'Y'}};

        var s real init r key {i};

        var t init tuple {i 2 + 1, d 1.0, c 'Z'};
        insert r update t : {i := i + 1};

        put_line(cast_as_string(count(r)));
        put_line(cast_as_string(count(s)));
        put_line((tuple from r where i=2).c);
        
        -- Test table with 2 keys

        var r2 real relation {no int, id string, str string} key {no} key {id};
        insert r2 tup{no 1, id '1', str 'xxx'};

        -- Test key #1
        try
            insert r2 tup {no 1, id '2', str 'yyy'};
        catch err key_violation_error;
            put_line('key violation caught (1)');
        end try;

        -- Test key #2
        try
            insert r2 tup {no 1, id '2', str 'zzz'};
        catch err key_violation_error;
            put_line('key violation caught (2)');
        end try;

        insert r2 tup{no 2, id '2', str 'xxx'};

        -- Table without KEY (implicit all-key)
        var r3 real rel {n int, s string};
        insert r3 tup {n 1, s 'a'};
        insert r3 tup {n 1, s 'b'};
        insert r3 tup {n 2, s 'a'};
        try
            insert r3 tup {n 1, s 'a'};
        catch err element_exists_error;
            put_line('element_exists_error');
        end try;
        put(count(r3)); put_line(' tuples');

        commit;
    }
} -result {4
3
Y
key violation caught (1)
key violation caught (2)
element_exists_error
3 tuples
}

test update {creating table and updating tuples} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;
        var r real relation {k int, v string}
                init rel { tup { k 1, v 'One' },
                           tup { k 2, v 'Two' }}
                key {k};
        
        -- Updating value
        update r where k = 1 { v := '1' };
        put_line((tuple from r where k = 1).v);
        put_line((tuple from r where k = 2).v);

        -- Updating values
        update r { v := v || v };
        put_line((tuple from r where k = 1).v);
        put_line((tuple from r where k = 2).v);

        -- Updating keys
        update r { k := k + 1 };
        put_line((tuple from r where k = 2).v);
        put_line((tuple from r where k = 3).v);

        -- Update that would violate the key constraint
        try
            update r { k := 1 };
        catch err key_violation_error;
            put_line('key violation caught');
        end try;

        -- Update combining both tuples into one 
        update r { k := 1, v := 'Uno' };
        put_line((tuple from r).v);

        commit;
    }
} -result {1
Two
11
TwoTwo
11
TwoTwo
key violation caught
Uno
}

test foreach_drop {DROP in FOREACH} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;
        var r real relation {no int, name string} key {no};
        insert r rel{tup{no 1, name 'one'}, tup{no 2, name 'two'}};

        var t tup{no int};
        try
            foreach t in r {no} order();
                drop var r;
            end foreach;
        catch err in_use_error;
            put_line('in_use caught');
        end try;
        commit;
    }
} -result {in_use caught
}

test invalid_type {invalid (scalar) type for table} -setup $SETUP -cleanup $CLEANUP -match glob -body {
    exec $testdir/../../dli/durodt << {
	    connect('dbenv');
    	current_db := 'D';

	    begin transaction;
    	var ir real int key {};
    }
}  -returnCodes {1} -result {*type_mismatch_error*}

test join_extend {Natural JOIN/EXTEND}  -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t1 real relation {a int, b string}
        		init relation { tuple {a 1, b 'x'}, tuple {a 2, b 'y'} } key {a};
        var t2 real init rel { tup {b 'x', c 1}, tup {b 'x', c 2}, tup {b 'y', c 3} };
        var t3 real init rel { tup {b 'x'}, tup {b 'y'} };

        var tp tup {a int, b string, c int};
        foreach tp in t1 join t2 order (a asc, b asc, c asc);
            put(tp.a); put(' ');
            put(tp.b); put(' ');
            put(tp.c); put_line('');
        end foreach;

        foreach tp in t1 join extend t3: { c := if b = 'x' then 0 else 1 } order (a asc, b asc, c asc);
            put(tp.a); put(' ');
            put(tp.b); put(' ');
            put(tp.c); put_line('');
        end foreach;

        -- Empty EXTEND
        var tp2 tuple same_heading_as(t1);
        foreach tp2 in t1 join extend t3: { } order (a asc, b asc);
            put(tp2.a); put(' ');
            put(tp2.b); put_line('');
        end foreach;

        -- EXTEND adding 2 attributes, using user-def operator

        operator dup_string(s string) returns string;
            return s || s;
        end operator;

        var tp3 tup {a int, b string, c int, d string};
        foreach tp3 in t1 join extend t3: { c := if b = 'x' then 0 else 1, d := dup_string(b) }
                order (a asc, b asc, c asc);
            put(tp3.a); put(' ');
            put(tp3.b); put(' ');
            put(tp3.c); put(' ');
            put(tp3.d); put_line('');
        end foreach;

        commit;
    }
} -result {1 x 1
1 x 2
2 y 3
1 x 0
2 y 1
1 x
2 y
1 x 0 xx
2 y 1 yy
}

test ra {relational algebra} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t1 real relation {a int, b string}
        		init relation { tuple {a 1, b 'x'}, tuple {a 2, b 'y'} } key {a};
        var t2 real relation {a int} key {a};

        var v2 virtual t2 where a <= 2;  

        insert t2 relation { tuple {a 2}, tuple {a 3} };

        -- project / INTERSECT
        put(with (p := t1 { a }, is := p intersect t2): (tuple from is).a); put_line('');

        -- SEMIMINUS / NOT MATCHING
        var tp init tuple from (t1 SEMIMINUS t2);
        put(tp.a); put(' ');
        put_line(tp.b);
        put((tuple from (t2 NOT MATCHING t1)).a); put_line('');

        -- remove
        put((tuple from (t1 where a = 1 { ALL BUT a })).b); put_line('');
        try
            put((tuple from (t1 where a = 1 { ALL BUT a })).a); put_line('');
        catch err name_error;
            put_line('name_error caught');
        end try;

        -- RENAME
        put((tuple from (v2 rename { a as na })).na); put_line('');

        put((tuple from (v2 rename { })).a); put_line('');

        var tpr init tuple from t1 rename { a as na, b as nb } where na = 2;
        put(tpr.na); put(' ');
        put_line(tpr.nb);

        -- UPDATE expression
        put((tuple from (update v2 : { a := a + 1 })).a); put_line('');

        -- no-op UPDATE
        put((tuple from (update v2 : { })).a); put_line('');

        var va init 1;
        put_line((tuple from (t1 where a = va)).b);

        put(is_empty(v2 where a>2)); put_line('');
        put(is_empty(v2 intersect rel{tup{a 2}})); put_line('');

        -- Test nested virtual table
        var vv2 virtual v2 where a>=2;
        put((tuple from vv2).a); put_line('');        

        var tpa tup{a int};
        foreach tpa in t1 {a} order (a asc);
            put(tpa.a); put_line('');
        end foreach;

        var tpb tup{b string};
        foreach tpb in t1 {all but a} order (b asc);
            put_line(tpb.b);
        end foreach;

        foreach tp in t1 order (b asc);
            put_line(tp.b);
        end foreach;

        commit;
    }
} -result {2
1 x
3
x
name_error caught
2
2
2 y
3
2
x
TRUE
FALSE
2
1
2
x
y
x
y
}

test virtual_assign {assignment to virtual tables} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;
        var emp real rel{emp_id int, dept_id int, name string} key {emp_id};
        commit;
    }
    exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;
        var empd1 virtual emp where dept_id = 1;
        insert empd1 tup {emp_id 1, dept_id 1, name 'Smith'};
        commit;
    }
    exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;

        insert empd1 tup {emp_id 2, dept_id 1, name 'Jones'};

        try
            -- Must fail because of dept_id=2
            insert empd1 tup {emp_id 3, dept_id 2, name 'Miller'};
        catch err predicate_violation_error;
            put_line('predicate violation caught');
        end try;

        var emptp tup same_heading_as(empd1);
        foreach emptp in empd1 order (emp_id asc);
            put_line(emptp.name);
        end foreach;

        commit;
    }
} -result {predicate violation caught
Smith
Jones
}

test tupleattr {tuple-valued attributes} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin tx;
        var tr real rel{no int, tp tup{n int, s string}} key{no};
        insert tr tup{no 1, tp tup{n 10, s 'one'}};

        commit;
    }
    # Test with new interpreter instance
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin tx;

        -- test tuple comparison in WHERE
        var t tup same_heading_as(tr);
        t := tuple from tr where no = 1 and tp = tup{n 10, s 'one'};
        put(t.no); put_line('');
        put(t.tp.n); put_line('');
        put(t.tp.s); put_line('');
        commit;
    }
} -result {1
10
one
}

test updop {user defined update operators} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        operator defop() updates {};
	        begin transaction;
	        
            var tp init tuple {a 0, b "duro"};
            var r real relation same_heading_as(tp) key {a};

            var v virtual (extend r : {bx := b || 'x'});

            commit;
        end operator;

        operator insop(t relation {b string, a int}) updates {t};
            insert t tuple {a 0, b "duro"};
        end operator;

        defop();
        insop(r);
        put((tuple from v).bx); put_line('');
        commit;
    }
} -result {durox
}

test roop {user defined read-only operators} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        operator int_to_rel(n int) returns rel{no int};
            var i int;
            var r private rel{no int} key {no};
            for i := 1 to n;
                insert r tup{no i};
            end for;
            return r;
        end operator;

        put(is_empty(int_to_rel(0))); put_line('');
        put(count(int_to_rel(3))); put_line('');
    }
} -result {TRUE
3
} 

test zero_attrs {Tables with zero attributes} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {        
        connect('dbenv');
        current_db := 'D';

        begin transaction;
        var ev virtual relation {i int} {};
        commit;

        disconnect();

        -- Connect again and read virtual table
        connect('dbenv');
        current_db:='D';
        begin tx;
        put(ev); put_line('');
        commit;
    }
} -result {RELATION {}
}

test logic {Logic operators} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t real relation {a int, b int} key {a, b};

        insert t relation { tuple {a 1, b 1}, tuple {a 1, b 2},
                tuple {a 2, b 1}, tuple {a 2, b 2} };

        var va virtual t where a=1 or b=1;
        var vo virtual t where a=1 and b=1;
        var vx virtual t where a=1 xor b=1;

        var arr array tuple {a int, b int};

        try
            load arr from vo order(i asc, b asc);
        catch err;
            put_line('invalid order clause');
        end try;

        -- Virtual table as variable
        load arr from va order(a asc, b asc);

        var i int;
        for i:= 0 to length(arr)-1;
			put(arr[i].a);
			put(' ');
			put(arr[i].b); put_line('');			
		end for;

		put_line('');

        -- Virtual table as expression
        load arr from t where a=1 or b=1 order(a asc, b asc);

        for i:= 0 to length(arr)-1;
			put(arr[i].a);
			put(' ');
			put(arr[i].b); put_line('');			
		end for;

		put_line('');

        load arr from vo order(a asc, b asc);
        
        for i:= 0 to length(arr)-1;
			put(arr[i].a);
			put(' ');
			put(arr[i].b); put_line('');			
		end for;

		put_line('');

        load arr from t where a=1 and b=1 order(a asc, b asc);
        
        for i:= 0 to length(arr)-1;
			put(arr[i].a);
			put(' ');
			put(arr[i].b); put_line('');			
		end for;

		put_line('');

        load arr from vx order(a asc, b asc);
        for i:= 0 to length(arr)-1;
			put(arr[i].a);
			put(' ');
			put(arr[i].b); put_line('');			
		end for;

		put_line('');

        load arr from t where a=1 xor b=1 order(a asc, b asc);
        for i:= 0 to length(arr)-1;
			put(arr[i].a);
			put(' ');
			put(arr[i].b); put_line('');			
		end for;

        commit;
    }
} -result {invalid order clause
1 1
1 2
2 1

1 1
1 2
2 1

1 1

1 1

1 2
2 1

1 2
2 1
}

test aggregate {Aggregate operators} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t real relation {b BOOLEAN} key {b};

		insert t tup {b true};
		insert t tup {b false};

		put(all(t, b)); put_line('');
		put(and(t, b)); put_line('');
		put(any(t, b)); put_line('');
		put(or(t, b)); put_line('');

        commit;
    }
} -result {FALSE
FALSE
TRUE
TRUE
}

test summarize {SUMMARIZE} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t real relation {a int, b int} key {a, b};

		insert t tup {a 1, b 0};
		insert t tup {a 1, b 1};
		insert t tup {a 2, b 1};
		insert t tup {a 2, b 2};

		var v virtual SUMMARIZE t PER t {a} : {
				a_sum := SUM(b),
		        a_all := ALL(b > 0),
		        a_and := AND(b > 0),
		        a_any := ANY(b > 0),
		        a_or := OR(b > 0) };

        var arr array tuple same_heading_as (v);

        load arr from v order(a asc);

        var i int;
        for i:= 0 to length(arr)-1;
			put(arr[i].a_sum);
			put(' ');
			put(arr[i].a_all);
			put(' ');
			put(arr[i].a_and);
			put(' ');
			put(arr[i].a_any);
			put(' ');
			put(arr[i].a_or); put_line('');
		end for;

        commit;
    }
} -result {1 FALSE FALSE TRUE TRUE
3 TRUE TRUE TRUE TRUE
}

test relrel {table with relation attribute} -setup $SETUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin transaction;

        var t real relation {x int, a string, r relation{s string, i int}} key {x};

		insert t tuple{x 1, a 'hm', r rel{tup{i 5, s 'yo'}}};

		var tp init tuple from (tuple from t).r;

        put(tp.i); put_line('');
        put_line(tp.s);
        commit;
    }
} -result {5
yo
}

test index {creating index} -setup $SETUP -cleanup $CLEANUP -match glob -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin tx;
        var r real relation {ai int, ad float, ac string} key {ai};
        commit;

        begin tx;
        index r_ac r (ac);
        index r_ad_ai r (ad, ai);
        commit;

        begin tx;
        var i int;
        for i:= 1 to 40;
            insert r tup{ai i, ad cast_as_float(i / 10), ac cast_as_string(i)};
        end for;
        explain r where ai > 35 and ad = 3.0 order();
        explain r where 35 < ai and 3.0 = ad order();

        var t tuple same_heading_as(r);
        foreach t in r where ai > 35 and ad = 3.0 order(ai asc);
            put(t.ai); put_line('');
        end foreach;

        commit;

        begin tx;
        drop index r_ac;
        drop index r_ad_ai;
        commit;
    }
} -result {*INDEX r_ad_ai*
*INDEX r_ad_ai*
36
37
38
39
}


test real_default {public real table with default values} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';

        begin tx;
        var r1 real relation {i int, r float, c string} key {i}
                default {r 1.2, c 'xyz'};
        insert r1 tup {i 5};
        var t1 init tuple from r1;

        var r2 real relation {i int, r float, c string}
                init rel {tup {i 0, r 1.0, c 'Zz'}}
                key {i} key {c}
                default {r 1.2, c 'xyz'};
        insert r2 tup {i 5};
        var t2 init tuple from (r2 where i=5);

        var r3 real relation {i int, r float, c string}
                init r2 default {r 1.2, c 'xyz'};
        insert r3 tup {i 6, c 'xyy'};
        var t3 init tuple from (r3 where i=6);

        -- Invalid keys
        try
        	var r4 real rel {no int, r float, name string}
            	    key {no} key {no, name} default {name 'John Doe'};
        catch err invalid_argument_error;
            put_line('r4: invalid_argument_error caught');
        end try;

        commit;

        put(t1.i); put(' ');
        put(cast_as_integer(t1.r * 100.0)); put(' ');
        put(t1.c); put_line('');

        put(t2.i); put(' ');
        put(cast_as_integer(t2.r * 100.0)); put(' ');
        put(t2.c); put_line('');

        put(t3.i); put(' ');
        put(cast_as_integer(t3.r * 100.0)); put(' ');
        put(t3.c); put_line('');
    }
} -result {r4: invalid_argument_error caught
5 120 xyz
5 120 xyz
6 120 xyy
}

test dbconstraint {db/table constraints 1} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        current_db := 'D';
        begin transaction;

        operator create_constraint() updates {};
            constraint cr count(r) <= 1;
        end operator;

        operator drop_constraint() updates {};
            drop constraint cr;
        end operator;

        var r real relation {no integer, name string}
                init relation {tuple {no 1, name 'one'}}
                key {no};

        create_constraint();

        try
            insert r tuple {no 2, name 'two'};
        catch err predicate_violation_error;
            put_line('caught predicate violation: ' || THE_MSG(err));
        end try;

        try
            drop var r;
        catch err in_use_error;
            put_line('caught in_use_error');
        end try;

        drop_constraint();
    }
} -result {caught predicate violation: cr
caught in_use_error
}

test dbconstraint2 {db/table constraints 2} -setup $SETUP -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        current_db := 'D';
        begin transaction;
        var r2 real rel {no int} key {no};
        
        constraint cr2 count(r2) <= 1;

        commit;
    }
    # Check for bug which caused the constraint to be still in memory
    # after DROP CONSTRAINT when constraints_read was false
    exec $testdir/../../dli/durodt -e dbenv -d D << {
        drop constraint cr2;
        
        begin tx;
        drop var r2;
        commit;
    }
}

# Test referential constraint, including optimization and EXPLAIN <assignment>
test refconstraint {referential constraint} -setup $SETUP -cleanup $CLEANUP -body {
    puts -nonewline [exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;
        var customers real rel {cust_id int, name string} key {cust_id};
        var orders real rel {order_id int, cust_id int, info string}
                key {order_id} default {info ''};
        constraint o_c orders {cust_id} subset_of customers {cust_id};

        insert customers rel{tup{cust_id 1, name 'James'}, tup{cust_id 2, name 'Joan'}};

        insert orders tup{order_id 1, cust_id 1};

        try
            insert orders tup{order_id 2, cust_id 3};
        catch err predicate_violation_error;
            put_line('insert into orders caught');
        end try;

        try
            delete customers where cust_id=1;
        catch err predicate_violation_error;
            put_line('delete from customers caught');
        end try;

        -- Must succeed
        delete customers where cust_id=2;

        commit;
    }]

    #
    # Check optimization
    #
    set checks [exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;
        explain insert orders tup{order_id 2, cust_id 2};
        commit;
    }]
    if {[string match {*orders*} $checks]} {
        puts "insert check #1 refers to orders: $checks"
    }

    set checks [exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;
        explain insert customers tup{cust_id 2, name 'John'};
        commit;
    }]
    if {[string match {*orders*} $checks]
            || [string match {*customers*} $checks]} {
        puts "insert check #2 refers to orders or customers: $checks"
    }    

    set checks [exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;
        explain delete orders where order_id=1;
        commit;
    }]
    if {[string match {*orders*} $checks]
            || [string match {*customers*} $checks]} {
        puts "delete check #1 refers to orders or customers: $checks"
    }    

    set checks [exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;
        explain delete customers where cust_id=1;
        commit;
    }]
    if {![string match {*INDEX customers$0*} $checks]} {
        puts "delete check #2 does not use primary index of customers"
    }

    set checks [exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;
        explain update orders where order_id=1 {info := 'yo'};
        commit;
    }]
    if {[string match {*orders*} $checks]
            || [string match {*customers*} $checks]} {
        puts "update check #1 refers to orders or customers: $checks"
    }    

    set checks [exec $testdir/../../dli/durodt -e dbenv -d D << {
        begin tx;
        explain update customers where cust_id=1 {name := 'Karlheiz'};
        commit;
    }]
    if {[string match {*orders*} $checks]
            || [string match {*customers*} $checks]} {
        puts "update check #2 refers to orders or customers: $checks"
    }    

} -output {insert into orders caught
delete from customers caught
}

test matching_index {MINUS, INTERSECT, SEMIJOIN, SEMIMINUS with index on table #2} -setup $SETUP -cleanup $CLEANUP -match glob -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        current_db := 'D';
        begin transaction;

        var t1 real rel{b int, c string}
                init RELATION {TUPLE {c 'B', b 1}, TUPLE {c 'C', b 1}};

        var t2 real rel{a int, b int, c string}
                init RELATION {TUPLE {a 1, c 'A', b 1}, TUPLE {a 2, c 'B', b 1},
                               TUPLE {a 3, c 'B', b 1}, TUPLE {a 4, c 'B', b 2},
                               TUPLE {a 5, c 'B', b 3}}
                 key {a};

        index t2_bc t2 (b, c);
        
        commit;

        begin tx;

        explain t1 semijoin t2 order();
        explain t1 semiminus t2 order();
        explain t1 intersect t2 {b, c} order();
        explain t1 minus t2 {b, c} order();

        var tp tuple {b int, c string};

        tp := tuple from (t1 semijoin t2);
        put(tp.b); put(' ');
        put(tp.c); put_line('');
        
        tp := tuple from (t1 semiminus t2);
        put(tp.b); put(' ');
        put(tp.c); put_line('');
        
        tp := tuple from (t1 intersect t2 {b, c});
        put(tp.b); put(' ');
        put(tp.c); put_line('');

        tp := tuple from (t1 minus t2 {b, c});
        put(tp.b); put(' ');
        put(tp.c); put_line('');
        
        commit;
    }
} -result {*INDEX t2_bc*
*INDEX t2_bc*
*INDEX t2_bc*
*INDEX t2_bc*
1 B
1 C
1 B
1 C
}

test utypetable {table with attribute of user-defined type} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e dbenv << {
        current_db := 'D';
        begin transaction;

        type utype
            possrep { s string }
            init utype('');

        implement type utype;
        end implement;

        var utr real rel{id int, uv utype} key {id};
        insert utr rel{tup{id 1, uv utype('a')},
                       tup{id 2, uv utype('b')}};

        try
            put_line(the_s(utr));
        catch err type_mismatch_error;
            put_line('type mismatch caught');
        end try;

        put_line(the_s((tuple from utr where id=1).uv));

        commit;

        begin tx;

        try
            drop type utype;
        catch err in_use_error;
            put_line('caught in_use_error');
        end try;

        drop var utr;
        drop type utype;

        commit;
    }
} -result {type mismatch caught
a
caught in_use_error
}

test implicit_tx {implicit transactions} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        implicit_tx := true;

        connect('dbenv');
        current_db := 'D';

        var r real relation {c string, n int, d float, s string}
            init relation { tuple { c 'xo', n 77, d 78.8, s 'Gr' } }
            key {c, n};

        insert r tuple { c 'Vanad', n 1234565, d 666.77, s 'Amethyst' };


        put((tuple from r where c = 'xo' and n = 77).s);
        put_line('');

        delete r where s = 'Gr';
        
        put((tuple from r).c); put_line('');
    }
} -result {Gr
Vanad
}

#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test tuple definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

test tuplevar {tuple variables} -body {
    exec $testdir/../../dli/durodt << {
        var t1 init tuple {i 5, s 'foo'};
        put_line(CAST_AS_STRING(t1.i) || ' ' || t1.s);
        put(t1.i); put_line('');
        put(s FROM t1); put_line('');

		var t2 init tuple{};
		var t3 init tuple{i 555};
		put(t3.i); put_line('');

        var t4 same_type_as(t1);
        t4 := tup {i 2, s 'bar'};
        put_line(CAST_AS_STRING(t4.i) || ' ' || t4.s);
        put(t4 {s}); put_line('');
    }
} -result {5 foo
5
foo
555
2 bar
TUPLE { s 'bar'}
}

test tupleupdexpr {tuple update expression} -body {
    exec $testdir/../../dli/durodt << {
        var t1 init tuple {i 5, s 'bar'};
        put((update t1 : {i := i + 2, s := s || 'r'}).i); put_line('');
        put(s from (update t1 : {i := i + 2, s := s || 'r'})); put_line('');        
    }
} -result {7
barr
}

test tupleupdstmt {tuple update statement} -body {
    exec $testdir/../../dli/durodt << {
        var t1 init tuple {i 5, s 'bar'};
        update t1 {i := i + 2, s := s || 'r'};
        put(t1.i); put_line('');
        put(s from t1); put_line('');        
    }
} -result {7
barr
}

test union {tuple UNION} -body {
    exec $testdir/../../dli/durodt << {
        var t1 init tuple {i 5, j 6} union tup {j 6, x 2};
        put(t1.i); put_line('');
        put(t1.j); put_line('');
        put(t1.x); put_line('');

        put((tuple{} union tuple {s 'yo'}).s); put_line('');
    }
} -result {5
6
2
yo
}

#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

#
# Test local (transient) tables
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

test private {creating private table and inserting tuples} -body {
    exec $testdir/../../dli/durodt << {
        var pr1 private relation {i int, d float, c string} key {i};
        insert pr1 relation {i int, d float, c string} {};

        try
            var ir private relation {i int} key {i};
            var ir private relation {i int} key {i};
        catch err element_exists_error;
            io.put_line("double creation caught");
        end try;

        var pr2 private relation {i int} init relation { tuple {i 1}, tuple {i 2} }
                key {i};

        var a init 1;
        insert pr1 relation {tuple {i a, d 1.0, c 'X'}, tuple {i 2, d 1.1, c 'Y'}};

        try
            insert pr1 tuple{i 1, d 2.0, c 'Z'};
        catch err key_violation_error;
            io.put_line('key_violation_error');
        end try;

        insert pr1 tuple {i 2 + 1, d 1.0, c 'Z'}; 

        update pr1 where i=3 { c:= 'ZZ' };

        delete pr1 where i<>2;

        io.put(count(pr1)); io.put_line('');
        io.put_line((tuple from pr1 where i = 2).c);

        -- SUM with non-existent table
        try
            io.put(sum(prinv, i)); io.put_line('');
        catch err name_error;
            io.put_line('name_error');
        end try;

        -- multiple update
        const two 2;
        var twenty init 20;
        update pr1 where i = two { i := twenty }, update pr2 where i = 1 { i := 10 };

        io.put((tuple from pr1).i); io.put_line('');
        io.put(sum(pr2, i)); io.put_line('');

        drop var pr1;

        -- Private table without KEY
        var pr3 private rel {n int, m int};
        insert pr3 tup {n 1, m 1};
        insert pr3 tup {n 1, m 2};
        insert pr3 tup {n 2, m 1};
        io.put(sum(extend pr3: {s := n + m}, s)); io.put_line('');

        -- Invalid relation selector
        try
            var pr4 init relation {a int} {tuple {a 'x'}};
        catch err type_mismatch_error;
            io.put_line('type_mismatch_error');
        end try;

        io.put((tuple from relation {a int} {tuple {a 7}}).a); io.put_line('');

        -- Error in INIT clause
        try
            var pr5 private relation {i int} init undef() key {i};
        catch err operator_not_found_error;
            io.put_line('operator_not_found_error');
        end try;

        -- Table assignment
        var pr6 private rel {n int, m int} init rel{tup{n 5, m 5}};
        pr6 := pr3;
        var t tuple same_heading_as(pr6);
        for t in pr6 order(n asc, m asc);
            io.put(cast_as_string(t.n));
            io.put(' ');
            io.put(cast_as_string(t.m));
            io.put_line('');
        end for;
    }
} -result {double creation caught
key_violation_error
1
Y
name_error
20
12
8
type_mismatch_error
7
operator_not_found_error
1 1
1 2
2 1
}

test deedum {TABLE_DEE and TABLE_DUM} -body {
    exec $testdir/../../dli/durodt << {
        io.put(tup from TABLE_DEE); io.put_line('');
        io.put(tup from DEE); io.put_line('');

        io.put(TABLE_DUM); io.put_line('');
        io.put(DUM); io.put_line('');

        io.put(tuple from (rel{} {} union table_dee)); io.put_line('');
        
        io.put((tuple from relation{tuple{i 7}} join table_dee).i); io.put_line('');       
    }
} -result {TUPLE {}
TUPLE {}
RELATION {}
RELATION {}
TUPLE {}
7
}

test group {GROUP} -body {
    exec $testdir/../../dli/durodt << {
		var gt init rel{tup{i 1, j 1}, tup{i 2, j 2}} group {i, j} as ij;
		io.put((tuple from gt).ij = rel{tup{i 1, j 1}, tup{i 2, j 2}}); io.put_line('');
    }
} -result {TRUE
}

test ungroup {UNGROUP} -body {
    exec $testdir/../../dli/durodt << {
		var ugt init rel{
		        tup {st rel{tup{s 'a', t 'b'}, tup{s 'c', t 'd'}}},
		        tup {st rel{tup{s 'e', t 'f'}}}} ungroup st;
		var arr array tuple{s string, t string};
		load arr from ugt order(s asc);
		io.put(LENGTH(arr)); io.put_line('');
		io.put_line(arr[0].s);
		io.put_line(arr[0].t);
		io.put_line(arr[1].s);
		io.put_line(arr[1].t);
		io.put_line(arr[2].s);
		io.put_line(arr[2].t);
    }
} -result {3
a
b
c
d
e
f
}

test sdivide {small DIVIDE} -body {
    exec $testdir/../../dli/durodt << {
        var pizzas private init rel{tup{pizza# 1}, tup{pizza# 2}};
        var condiments private init rel{tup{cond 'salami'},tup{cond 'mushrooms'}};

        try
            var p_c private init rel{tup{pizza# 1, cond 'salami'},
                    tup{pizza 2, cond 'salami'}, tup{pizza 2, cond 'mushrooms'}};
        catch err;
            io.put_line('error caught');
        end try;

        var p_c private init rel{tup{pizza# 1, cond 'salami'},
                tup{pizza# 2, cond 'salami'}, tup{pizza# 2, cond 'mushrooms'}};
                
        -- Get # of pizza with all condiments
        io.put((tuple from (pizzas divideby condiments per (p_c))).pizza#); io.put_line('');
    }
} -result {error caught
2
}

test union {UNION and D_UNION} -body {
    exec $testdir/../../dli/durodt << {
        var p private init rel{tup{n 1, s 'alpha'}};
        var v int;

	    var arr array tuple{i int};
	    load arr from rel{tup{i 1}} union rel{tup{i 2}} order (i asc);
	    io.put(arr[0].i); io.put_line('');
	    io.put(arr[1].i); io.put_line('');
	    io.put_line('');
	
	    var tp tuple{i int, s string};
	    for tp in rel{tup{i 1, s 'a'}} union rel{tup{i 2, s 'b'}} order (i desc);
	        io.put(tp.i); io.put(' ');
	        io.put(tp.s); io.put_line('');
	    end for;
	    io.put_line('');

        try
            v := count(p union rel{tup{n 2, m 3, s 'beta'}});
        catch err type_mismatch_error;
            io.put_line('type mismatch (1)');
        end try;

        try
            v := count(p d_union rel{tup{n 2, m 3, s 'beta'}});
        catch err type_mismatch_error;
            io.put_line('type mismatch (2)');
        end try;

        io.put_line((tuple from p union rel{tup{n 1, s 'alpha'}}).s);
        
        try
        io.put_line((tuple from p d_union rel{tup{n 1, s 'alpha'}}).s);
        catch err element_exists_error;
            io.put_line('element_exists_error caught');
        end try;

        var tp2 tuple same_heading_as(p);
        for tp2 in p d_union rel{tup{n 1, s 'alfa'}} order (s asc);
            io.put_line(tp2.s);
        end for;

        io.put_line('');

        for tp2 in rel{tup{n 1, s 'alfa'}, tup{n 2, s 'beta'}} d_union p
                order (s asc);
            io.put_line(tp2.s);
        end for;

        if (tup{n 1, s 'alfa'} in (p d_union rel{tup{n 1, s 'alfa'}})) then
            io.put_line('ok');
        end if;
    }
} -result {1
2

2 b
1 a

type mismatch (1)
type mismatch (2)
alpha
element_exists_error caught
alfa
alpha

alfa
alpha
beta
ok
}

test ra {relational algebra} -body {
    exec $testdir/../../dli/durodt << {
        io.put((tuple from (rel{tup{i 1}, tup{i 2}} minus rel{tup{i 1}})).i);
        io.put_line('');

        io.put(count(rel{tup{i 1}} minus rel{tup{i 1}}));
        io.put_line('');

        io.put(is_empty(rel{tup{i 1}} intersect rel{tup{i 2}}));
        io.put_line('');

        var pr private init rel{tup{id 1, name 'x'},
                tup{id 2, name 'y'}};
        io.put_line((tuple from pr semijoin rel{tup{name 'y'}}).name);

        io.put_line((tuple from pr matching (rel{tup{id 1}, tup{id 2}} where id=1)).name);

        io.put_line((tuple from pr matching (rel{tup{id 1, name 'z'}} {id})).name);

        io.put_line((tuple from
                pr semiminus (rel{tup{id 1}}
                              join rel{tup{name 'x'}}))
                .name);

        io.put((is_empty(pr not matching (rel{tup{id 1}} union rel{tup{id 2}}))));
        io.put_line('');

        io.put_line((tuple from
                pr matching (rel{tup{id 1}, tup{id 2}}
                             intersect rel{tup{id 2}, tup{id 3}}))
               .name);
        io.put_line((tuple from
                pr intersect (pr matching rel{tup{id 2}, tup{id 3}}))
               .name);
    }
} -result {2
0
TRUE
y
x
x
y
TRUE
y
y
}

test relattr {relation-valued attribute} -body {
    exec $testdir/../../dli/durodt << {
        var t tuple{r relation{i int}};

        io.put(is_empty(t.r)); io.put_line('');
    }
} -result {TRUE
}

test private_default {private table with default values} -body {
    exec $testdir/../../dli/durodt << {
        var r1 private relation {i int, r float, c string} key {i}
                default {r 1.2, c 'xyz'};
        insert r1 tup {i 5};
        var t1 init tuple from r1;

        var r2 private relation {i int, r float, c string}
                init rel {tup {i 0, r 1.0, c 'Zz'}}
                key {i} key {c}
                default {r 1.2, c 'xyz'};
        insert r2 tup {i 5};
        var t2 init tuple from (r2 where i=5);

        var r3 private relation {i int, r float, c string}
                init r2 default {r 1.2, c 'xyz'};
        insert r3 tup {i 6, c 'xyy'};
        var t3 init tuple from (r3 where i=6);

        -- Invalid table type
        try
            var r4 private tup {no int, r float, name string}
                    key {no} default {name 'John Doe'};
        catch err type_mismatch_error;
            io.put_line('r4: type_mismatch_error caught');
        end try;

        io.put(t1.i); io.put(' ');
        io.put(cast_as_integer(t1.r * 100.0)); io.put(' ');
        io.put(t1.c); io.put_line('');

        io.put(t2.i); io.put(' ');
        io.put(cast_as_integer(t2.r * 100.0)); io.put(' ');
        io.put(t2.c); io.put_line('');

        io.put(t3.i); io.put(' ');
        io.put(cast_as_integer(t3.r * 100.0)); io.put(' ');
        io.put(t3.c); io.put_line('');
    }
} -result {r4: type_mismatch_error caught
5 120 xyz
5 120 xyz
6 120 xyy
}

test tclose {TCLOSE} -body {
    exec $testdir/../../dli/durodt << {
        var t tuple {n1 int, n2 int};
        for t in tclose(rel{tup{n1 1, n2 2}, tup{n1 2, n2 3},
                tup{n1 3, n2 12}, tup{n1 10, n2 10}, tup{n1 10, n2 8}})
                order (n1 asc, n2 asc);
            io.put(t.n1); io.put(' ');
            io.put(t.n2); io.put_line('');
        end for;

        io.put_line(if is_empty(tclose(rel {n1 int, n2 int} {}))
                then 'empty' else 'not empty');
        
        try
            io.put(tclose(rel {tup {n 1, s '1'}}));
        catch err;
            io.put_line('invalid TCLOSE caught');
        end try;
    }
} -result {1 2
1 3
1 12
2 3
2 12
3 12
10 8
10 10
empty
invalid TCLOSE caught
}

test delete {DELETE operator} -body {
    exec $testdir/../../dli/durodt << {
	    var pr1 private relation {n int, s string}
	            init rel {tup {n 1, s 'one'}, tup {n 2, s 'two'}, tup {n 3, s 'two'},
	                      tup {n 4, s 'two'}, tup {n 5, s 'five'}, tup {n 6, s 'six'}}
	            key {n};
	
	    delete pr1 where n = 1;

	    delete pr1 tup{n 2, s 'two'};
	    delete pr1 rel{tup{n 3, s 'two'}, tup{n 4, s 'two'}};

	    const six 6;
	    delete pr1 where n = six;

	    var t init tuple from pr1;
	    io.put(t.n);
	    io.put(' ');
	    io.put(t.s);
	    io.put_line('');
	}
} -result {5 five
}

test bigtable_explain {Big local table and EXPLAIN} -match glob -body {
    exec $testdir/../../dli/durodt << {
        var pr private relation {a int, b int} key {a};
        var i int;
        for i := 1 to 500;
            insert pr tup {a i, b i};
        end for;
        explain pr where a = 400 order();
        var tp tuple same_heading_as(pr);
        for tp in pr where b = 200 order();
            io.put (tp.b);
            io.put_line('');
        end for;
    }
} -result {*pr INDEX pr$0*
200
}

test multikey {multiple keys} -body {
    exec $testdir/../../dli/durodt << {
        var p private relation {n int, s string, t string}
                key {n} key {s};
        insert p tup { n 1, s 'yo', t 'yo' };
        try
            insert p tup { n 1, s 'yoyo', t 'yoyo' };
        catch err key_violation_error;
            io.put_line('key_violation #1 caught');
        end try;
        try
            insert p tup { n 2, s 'yo', t 'yoyo' };
        catch err key_violation_error;
            io.put_line('key_violation #2 caught');
        end try;
        insert p tup { n 2, s 'yoyo', t 'yo' };

        var a array tuple{n int, s string, t string};
        load a from p order(s desc);
        io.put(a = array(tup { n 2, s 'yoyo', t 'yo' }, tup { n 1, s 'yo', t 'yo' }));
        io.put_line(''); 
    }
} -result {key_violation #1 caught
key_violation #2 caught
TRUE
}

cleanupTests

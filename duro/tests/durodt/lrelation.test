#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test local (transient) tables
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

test private {creating private table and inserting tuples} -body {
    exec $testdir/../../dli/durodt << {
        var r private relation {i int, d float, c string} key {i};
        insert r relation {} {};

        try
            var ir private relation {i int} key {i};
            var ir private relation {i int} key {i};
        catch err element_exists_error;
            put_line("double creation caught");
        end try;

        var s private relation {i int} init relation { tuple {i 1}, tuple {i 2} }
                key {i};

        var a init 1;
        insert r relation {tuple {i a, d 1.0, c 'X'}, tuple {i 2, d 1.1, c 'Y'}};

        insert r tuple {i 2 + 1, d 1.0, c 'Z'}; 

        update r where i=3 { c:= 'ZZ' };

        delete r where i<>2;

        put(count(r)); put_line('');
        put_line((tuple from r where i=2).c);
        put(sum(s, i)); put_line('');
        drop var r;
        
        -- test invalid relation selector
        try
            var r init relation {a int} {tuple {a 'x'}};
        catch err type_mismatch_error;
            put_line("type mismatch");
        end try;
        
        put((tuple from relation {a int} {tuple {a 7}}).a); put_line('');
    }
} -result {double creation caught
1
Y
3
type mismatch
7
}

test deedum {TABLE_DEE and TABLE_DUM} -body {
    exec $testdir/../../dli/durodt << {
        put(tup from TABLE_DEE); put_line('');
        put(tup from DEE); put_line('');

        put(TABLE_DUM); put_line('');
        put(DUM); put_line('');

        put(tuple from (rel{} {} union table_dee)); put_line('');
        
        put((tuple from relation{tuple{i 7}} join table_dee).i); put_line('');       
    }
} -result {TUPLE { }
TUPLE { }
RELATION { }
RELATION { }
TUPLE { }
7
}

test group {GROUP} -body {
    exec $testdir/../../dli/durodt << {
		var gt init rel{tup{i 1, j 1}, tup{i 2, j 2}} group {i, j} as ij;
		put((tuple from gt).ij = rel{tup{i 1, j 1}, tup{i 2, j 2}}); put_line('');
    }
} -result {TRUE
}

test ungroup {UNGROUP} -body {
    exec $testdir/../../dli/durodt << {
		var ugt init rel{
		        tup {st rel{tup{s 'a', t 'b'}, tup{s 'c', t 'd'}}},
		        tup {st rel{tup{s 'e', t 'f'}}}} ungroup st;
		var arr array tuple{s string, t string};
		load arr from ugt order(s asc);
		put(LENGTH(arr)); put_line('');
		put_line(arr[0].s);
		put_line(arr[0].t);
		put_line(arr[1].s);
		put_line(arr[1].t);
		put_line(arr[2].s);
		put_line(arr[2].t);
    }
} -result {3
a
b
c
d
e
f
}

test sdivide {small DIVIDE} -body {
    exec $testdir/../../dli/durodt << {
        var pizzas private init rel{tup{pizza# 1}, tup{pizza# 2}};
        var condiments private init rel{tup{cond 'salami'},tup{cond 'mushrooms'}};

        try
            var p_c private init rel{tup{pizza# 1, cond 'salami'},
                    tup{pizza 2, cond 'salami'}, tup{pizza 2, cond 'mushrooms'}};
        catch err;
            put_line('error caught');
        end try;

        var p_c private init rel{tup{pizza# 1, cond 'salami'},
                tup{pizza# 2, cond 'salami'}, tup{pizza# 2, cond 'mushrooms'}};
                
        -- Get # of pizza with all condiments
        put((tuple from (pizzas divideby condiments per (p_c))).pizza#); put_line('');
    }
} -result {error caught
2
}

test ra {relational algebra} -body {
    exec $testdir/../../dli/durodt << {
	    var arr array tuple{i int};
	    load arr from rel{tup{i 1}} union rel{tup{i 2}} order (i asc);
	    put(arr[0].i); put_line('');
	    put(arr[1].i); put_line('');
	    put_line('');
	
	    var t tuple{i INT};
	    foreach t in rel{tup{i 1}} union rel{tup{i 2}} order (i desc);
	        put(t.i); put_line('');
	    end foreach;
	    put_line('');

        put((tuple from (rel{tup{i 1}, tup{i 2}} minus rel{tup{i 1}})).i);
        put_line('');

	    put(count(rel{tup{i 1}} minus rel{tup{i 1}}));
	    put_line('');

        put(is_empty(rel{tup{i 1}} intersect rel{tup{i 2}}));
        put_line('');

        var pr private init rel{tup{id 1, name 'x'},
                tup{id 2, name 'y'}};
        put_line((tuple from pr semijoin rel{tup{name 'y'}}).name);

        put_line((tuple from pr matching (rel{tup{id 1}, tup{id 2}} where id=1)).name);

        put_line((tuple from pr matching (rel{tup{id 1, name 'z'}} {id})).name);

        put_line((tuple from
                pr semiminus (rel{tup{id 1}}
                              join rel{tup{name 'x'}}))
                .name);

        put((is_empty(pr not matching (rel{tup{id 1}} union rel{tup{id 2}}))));
        put_line('');
    }
} -result {1
2

2
1

2
0
TRUE
y
x
x
y
TRUE
}

test relattr {relation-valued attribute} -body {
    exec $testdir/../../dli/durodt << {
        var t tuple{r relation{i int}};

        put(is_empty(t.r)); put_line('');
    }
} -result {TRUE
}

test foreach {FOREACH} -body {
    exec $testdir/../../dli/durodt << {
        var pr private init relation{tup{i 1, j 1},tup{i 2, j 20}};

        var t1 tuple{i integer, j integer};
        foreach t1 in pr order(i asc);
            put(t1.i); put_line('');
        end foreach;
        foreach t1 in pr order(i desc);
            put(t1.i); put_line('');
        end foreach;

        var t2 tuple{i integer};
        foreach t2 in pr {i} order(i asc);
            put(t2.i); put_line('');
        end foreach;
        foreach t2 in pr {i} order(i desc);
            put(t2.i); put_line('');
        end foreach;

        -- LEAVE with label
        l: foreach t2 in pr {i} order(i asc);
            put(t2.i); put_line('');
            if t2.i = 1 then
                leave l;
            end if;
        end foreach;
    }
} -result {1
2
2
1
1
2
2
1
1
}

test private_default {private table with default values} -body {
    exec $testdir/../../dli/durodt << {
        var r1 private relation {i int, r float, c string} key {i}
                default {r 1.2, c 'xyz'};
        insert r1 tup {i 5};
        var t1 init tuple from r1;

        var r2 private relation {i int, r float, c string}
                init rel {tup {i 0, r 1.0, c 'Zz'}}
                key {i} key {c}
                default {r 1.2, c 'xyz'};
        insert r2 tup {i 5};
        var t2 init tuple from (r2 where i=5);

        var r3 private relation {i int, r float, c string}
                init r2 default {r 1.2, c 'xyz'};
        insert r3 tup {i 6, c 'xyy'};
        var t3 init tuple from (r3 where i=6);

        -- Invalid table type
        try
            var r4 private tup {no int, r float, name string}
                    key {no} default {name 'John Doe'};
        catch err type_mismatch_error;
            put_line('r4: type_mismatch_error caught');
        end try;

        put(t1.i); put(' ');
        put(cast_as_integer(t1.r * 100.0)); put(' ');
        put(t1.c); put_line('');

        put(t2.i); put(' ');
        put(cast_as_integer(t2.r * 100.0)); put(' ');
        put(t2.c); put_line('');

        put(t3.i); put(' ');
        put(cast_as_integer(t3.r * 100.0)); put(' ');
        put(t3.c); put_line('');
    }
} -result {r4: type_mismatch_error caught
5 120 xyz
5 120 xyz
6 120 xyy
}

#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

#
# Test public tables
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

source $testdir/setup.tcl

test create {creating and populating public table} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';

        begin transaction;
        var r1 real relation {no int, c string} key {no};
        var r2 real relation {no int, c float} key {no};
        var r3 real relation {no int, c string};
        commit;

        begin tx;
        
        var p public relation {no int, c string} key {no};
        
        -- Drop and recreate
        drop var p;        
        var p public relation {no int, c string} key {no};

        -- not mapped
        try
            var i init count(p);
        catch err name_error;
            io.put_line('name error caught');
        end try;

        -- Must reconnect before accessing p again
        commit;
        disconnect();
        if os.getenv('DURO_STORAGE')='POSTGRESQL' then
            connect('postgresql:///testdb');
        else
            connect('dbenv');
        end if;
        current_db:='D';

        begin tx;

        map p r1;

        -- type mismatch
        try
            map p r2;
        catch err type_mismatch_error;
            io.put_line('type mismatch caught');
        end try;

        -- keys do not match
        try
            map p r3;
        catch err invalid_argument_error;
            io.put_line('invalid arguments caught');
        end try;

        insert p tup{no 1, c 'one'};
        insert r1 tup{no 2, c 'two'};

        var tp tuple same_heading_as(p);
        for tp in p order(no asc);
            io.put(tp.no);
            io.put(' ');
            io.put_line(tp.c);
        end for;

        io.put(count(p)); io.put_line('');
        commit;

        io.put_line('');

        begin tx;

        -- remap to new table
        var r4 real relation {no int, c string} init rel{tup{no 10, c 'ten'}} key {no};

        map p r4;

        insert p tup{no 11, c 'eleven'};

        for tp in p order(no asc);
            io.put(tp.no);
            io.put(' ');
            io.put_line(tp.c);
        end for;        

        -- Dropping the table the public table is mapped to should fail
        try
            drop var r4;
            io.put_line('Dropping r4 succeeded');
        catch err in_use_error;
            ;
        end try;

        -- Rename
        rename var p as p2;
        io.put_line((tuple from p2 where no = 11).c);

        insert p2 tup { no 16, c 'sss' };

        try
            var cnt init count(p);
        catch err name_error;
            io.put_line('name error caught');
        end try;

        io.put(count(r1)); io.put_line('');
        commit;
        
        -- Assign (copy)
        begin tx;
        p2 := rel { tup {no 17, c 'yo'} };
        tp := tuple from p2;
        drop var p2;
        commit;

        io.put(tp.no);
        io.put(' ');
        io.put_line(tp.c);
    }
} -result {name error caught
type mismatch caught
invalid arguments caught
1 one
2 two
2

10 ten
11 eleven
eleven
name error caught
2
17 yo
}

test create_allkey {creating public table that is implicitly all-key} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';

        begin transaction;
        var r1 real relation {no int, c string} key {no, c};
        var p public relation {no int, c string};
        map p r1;
        commit;

        begin tx;
        drop var p;
        commit;
    }
}

test rollback {rollback after accessing public} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';

        begin transaction;
        var r real relation {no int, name string, data string}
                key {no} key {name};

        var p public relation {no int, name string, data string}
                key {no} key {name};

        map p r;
        commit;

        begin tx;
        var cnt init count(p);
        rollback;
    }
}

cleanupTests

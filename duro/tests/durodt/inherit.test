#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

#
# Test scalar definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

set ::SETUP {
    removeDirectory dbenv
    makeDirectory dbenv
    cd $::tcltest::temporaryDirectory
    exec $testdir/../../dli/durodt << {
        create_env('dbenv');
        create_db('D');
    }
}

set ::CLEANUP {
    removeDirectory dbenv
}

test subtypes {Subtypes} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';
        begin tx;

        type shape union;

        type circle is shape
        possrep { radius int }
        init circle(0);

        type rectangle is shape
        possrep { width int, height int }
        init rectangle(0, 0);

        implement type circle;
        end implement;
        
        implement type rectangle;
        end implement;

        commit;
        
        begin tx;

        var s shape init circle(1);
    
        io.put(is_shape(s)); io.put_line('');
        io.put(is_circle(s)); io.put_line('');
        io.put(is_rectangle(s)); io.put_line('');
    
        try
            io.put(s.radius);
            io.put_line('getting property from variable of dummy type succeeded');
        catch e invalid_argument_error;
            ;
        end try;
    
        io.put(treat_as_circle(s).radius);
        io.put_line('');

        try
            var r rectangle init treat_as_rectangle(s);
            io.put_line('treating circle as rectangle succeeded');
        catch e type_mismatch_error;
            ;
        end try;

        try
            var r rectangle init treat_as_circle(s);
            io.put_line('initializing rectangle with circle succeeded');
        catch e type_mismatch_error;
            ;
        end try;

        try
            s.radius := 2;
            io.put_line('assigning property of variable with dummy type as DT succeeded');
        catch invalid_argument_error;
            ;
        end try;

        try
            treat_as_x(s).y := 1;
            io.put_line('Assigning TREAT with non-existing type succeeded');
        catch e type_mismatch_error;
            ;
        end try;

        treat_as_circle(s).radius := 3;

        io.put(treat_as_circle(s).radius);
        io.put_line('');

        -- Test read-only operator

        operator width(s shape) returns integer;
        end operator;

        operator width(c circle) returns integer;
            return c.radius * 2;
        end operator;

        operator width(r rectangle) returns integer;
            return r.width;
        end operator;
        
        io.put(width(s)); io.put_line('');

        s := rectangle(4, 2);
        io.put(width(s)); io.put_line('');

        s := circle(3);
        io.put(width(s)); io.put_line('');

        var s2 shape init rectangle(3, 3);
        io.put(s = s2); io.put_line('');
        
        s2 := circle(3);
        io.put(s = s2); io.put_line('');

        io.put(s = circle(3)); io.put_line('');

        operator width2(s shape) returns integer;
            return width(s) * 2;
        end operator;

        io.put(width2(s)); io.put_line('');

        commit;

        -- Test update operator with read-only argument
        begin tx;
        
        operator print(c circle) updates {};
            io.put_line('radius: ' || cast_as_string(c.radius));
        end operator;

        operator print_shape(s shape) updates {};
            io.put('shape: ');
            print(s);
        end operator;

        print(s);

        print_shape(s);

        commit;

        var pshapes private relation { shno int, sh shape };

        insert pshapes tup { shno 1, sh s };
        insert pshapes tup { shno 2, sh rectangle(4, 5) };

        var sha array tuple same_heading_as(pshapes);
        load sha from pshapes order(shno asc);

        io.put(treat_as_circle(sha[0].sh).radius);
        io.put_line('');

        var rec init treat_as_rectangle(sha[1].sh);
        io.put(rec.width);
        io.put(' ');
        io.put(rec.height);
        io.put_line('');
        
        -- Test update operators with update argument
        begin tx;

        operator expand(c circle, factor int) updates { c };
            c.radius := c.radius * factor;
        end operator;

        expand(s, 2);
        io.put(treat_as_circle(s).radius);
        io.put_line('');

        operator to_rectangle(s shape) updates { s };
            if is_circle(s) then
                var r init treat_as_circle(s).radius;
                s := rectangle(r / 2, r / 2);
            end if;
        end operator;
        
        to_rectangle(s);
        io.put(is_circle(s));
        io.put_line('');
        io.put(is_rectangle(s));
        io.put_line('');
        io.put(treat_as_rectangle(s).width);
        io.put_line('');
        io.put(treat_as_rectangle(s).height);
        io.put_line('');
        
        -- Changing the DT must fail
        var c circle;
        try
            to_rectangle(c);
            io.put_line('changing DT from circle to rectangle succeeded');
        catch e type_mismatch_error;
            ;
        end try;

        try
            operator to_rectangle_hack(s shape) updates { };
                if is_circle(s) then
                    var r init treat_as_circle(s).radius;
                    s := rectangle(r / 2, r / 2);
                end if;
            end operator;

            to_rectangle_hack(c);
            io.put_line('changing DT from circle to rectangle via non-update parameter succeeded');
        catch e type_mismatch_error;
            ;
        end try;

        commit;
    }
} -result {TRUE
TRUE
FALSE
1
3
6
4
6
FALSE
TRUE
TRUE
12
radius: 3
shape: radius: 3
3
4 5
6
FALSE
TRUE
3
3
}

test returntype {Return type conflict} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';
        begin tx;

        type shape union;

        type circle is shape
        possrep { radius int }
        init circle(0);

        implement type circle;
        end implement;

        commit;
        
        begin tx;        
        
        operator area(s shape) returns int;
        end operator;

        operator area(c circle) returns float;
            return 3.14159 * cast_as_float(c.radius * c.radius);
        end operator;

        var s shape init circle(0);

        try        
        	io.put(area(s));
        	io.put_line('');
        	io.put_line('read-only operator call succeeded'
        	        || ' despite conflicting return type');
        catch e type_mismatch_error;
            ;
        end try;

        commit;
    }
} -result {}

test subtypes_rel_array_rep {Subtypes with relation and array representations} \
        -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';
        begin tx;

        type rel_or_array union;

        type reltype is rel_or_array possrep { r rel { s string } } init reltype(rel { tup { s '' } });

        implement type reltype;
        end implement;

        type arrtype is rel_or_array possrep { a array string } init arrtype(array string());

        implement type arrtype;
        end implement;

        -- Type with array rep is yet to come

        commit;

        var pr private rel { n int, r rel_or_array } key {n};

        insert pr tup{n 1, r reltype(rel{tup{s 'yo'}})};
        insert pr tup{n 2, r arrtype(array('foo', 'bar'))};

        var raha array tuple same_heading_as(pr);
        load raha from pr order(n asc);

        io.put((tuple from treat_as_reltype(raha[0].r).r).s);
        io.put_line('');

        io.put(treat_as_arrtype(raha[1].r).a[0]);
        io.put(' ');
        io.put(treat_as_arrtype(raha[1].r).a[1]);
        io.put_line('');
    }
} -result {yo
foo bar
}

test droptypes {Drop types} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';
        begin tx;
        type t1 union;
        commit;
    }
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';
        begin tx;
        
        type t2 is t1 possrep { n int } init t2(0);
        
        try
            drop type t1;
            io.put_line('dropping supertype succeeded');
        catch err in_use_error;
            ;
        end try;
        
        drop type t2;
        
        drop type t1;

        try
        	var t t2;
            io.put_line('creating variable of dropped type succeeded');
        catch err type_not_found_error;
            ;
        end try;
        
        commit;
    }
} -result {}

test multiple {Multiple inheritance} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt << {
        connect('dbenv');
        current_db := 'D';
        begin tx;

        type engine_driven union;
        
        type road_vehicle union;

        type car is engine_driven, road_vehicle
            possrep { model string, performance int }
            init car('', 0);

        implement type car;
        end implement;

        type bicycle is road_vehicle
            possrep { model string }
            init bicycle('');

        implement type bicycle;
        end implement;

        var ed engine_driven init car('M', 88);

        io.put(is_engine_driven(ed));
        io.put_line('');
        io.put(is_road_vehicle(ed));
        io.put_line('');
        io.put(is_car(ed));
        io.put_line('');

        -- Test treat_as
        var rv road_vehicle init treat_as_road_vehicle(ed);

        io.put_line('');
        
        rv := bicycle('B');
        io.put(is_bicycle(rv));
        io.put_line('');
        io.put(is_engine_driven(rv));
        io.put_line('');
        io.put(is_road_vehicle(rv));
        io.put_line('');
        io.put(is_car(rv));
        io.put_line('');

        try
            io.put(is_integer(rv));
            io.put_line(' is_integer(road_vehicle) succeeded');
        catch err type_mismatch_error;
            ;
        end try;

        try
            io.put(is_engine_driven(bicycle('C')));
            io.put_line(' is_engine_driven(bicycle) succeeded');
        catch err type_mismatch_error;
            ;
        end try;

        commit;
    }
} -result {TRUE
TRUE
TRUE

TRUE
FALSE
TRUE
FALSE
}

cleanupTests

#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

# $Id$
#
# Test rollback
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

source [file dirname [info script]]/setup.tcl

test rollback {rollback} -setup $SETUP -body {
    set dbenv [duro::env open -create [configure -tmpdir]/dbenv]

    # Create Database
    duro::db create $dbenv TEST
    
    set tx [duro::begin $dbenv TEST]
    
    # Create table
    duro::table create T {
       {A string}
       {B string}
    } {{A}} $tx

    duro::index create TIX T {B asc} $tx
    
    duro::commit $tx
    
    set tx [duro::begin $dbenv TEST]

    duro::insert T {A a B b} $tx

    if {[duro::expr {is_empty(T)} $tx]} {
        dberror "T is empty"
    }

    duro::rollback $tx

    duro::env close $dbenv
    
    set dbenv [duro::env open [configure -tmpdir]/dbenv]
    
    set tx [duro::begin $dbenv TEST]
    
    if {[duro::expr {NOT is_empty(T)} $tx]} {
        dberror "T is not empty"
    }
    
    duro::commit $tx
    
    duro::env close $dbenv
}

test droptables_rollback {drop table and rollback} -setup $SETUP -body {
    set dbenv [duro::env open -create [configure -tmpdir]/dbenv]

    # Create Database
    duro::db create $dbenv TEST

    set tx [duro::begin $dbenv TEST]

    duro::table create T1 {
       {NO integer}
    } {{NO}} $tx

    duro::commit $tx

    set tx [duro::begin $dbenv TEST]

    duro::table drop T1 $tx

    duro::rollback $tx

    # Close DB environment
    duro::env close $dbenv

    set dbenv [duro::env open [configure -tmpdir]/dbenv]

    set tx [duro::begin $dbenv TEST]

    puts [duro::expr {COUNT(T1)} $tx]

    duro::commit $tx
    
    # Close DB environment
    duro::env close $dbenv
} -output {0
}

cleanupTests

$Id$

Summary of Changes for Duro

Changes for Duro 0.9

- Switched to Berkeley DB 4.3.

- Added dump utility durodump.tcl.

- Added B-tree indexes.

- RDB_set_table_name() now works for global tables.

- Replaced RDB_user_op() by RDB_ro_op() and RDB_ro_op_va().

- Dropped RDB_neq() etc., replaced by RDB_ro_op() and RDB_ro_op_va().

- Added transaction argument to RDB_select(), RDB_extend(), and
  RDB_summarize().

- Added built-in operators LENGTH, SUBSTRING, IS_EMPTY, COUNT, and SUBSET_OF.

- Added conversion operators, arithmetical operators, etc., as built-in
  operators.

- Durotcl now supports creating tables with user-defined types.

- Implemented duro::table rename and duro::table def.

- Changed duro::table attrs.

- Expressions now support backslash escaping in strings.

- Changed expression grammar so that expressions like A UNION B UNION C
  are now possible.

- Minor change to RDB_expression struct.

- Removed RDB_begin_uoi() and RDB_end_uoi() from the API specification.

Changes for Duro 0.8

- Introduced error code RDB_ATTRIBUTE_NOT_FOUND.

- Implemented RDB_insert() for RENAME, WRAP, UNWRAP tables.

- Implemented RDB_project_tuple() and RDB_join_tuples().

- Implemented RDB_update() for selection tables.

- Implemented RDB_delete() for EXTEND tables.

- Implemented RDB_create_table_index() and RDB_drop_table_index().

- Implemented RDB_table_equals().

- Implemented RDB_expr_contains().

- RDB_create_table() does now more complete argument checking.

- Added query optimizer.

- RDB_binary_get() now returns a pointer to the data instead of copying it.

- Now allowing nonscalar types as operator argument and return types.

- Now allowing nonscalar types as actual representations.

- Added SUBSET operator.

- Implemented GROUP and UNGROUP.

- Implemented support for system-implemented user-defined types with
  more than one possrep component.

- Changed RDB_create_tuple_type() and RDB_create_relation_type(), which now
  return an error code.

- Changed argument order of RDB_extract_tuple() and RDB_call_ro_op().

- Implemented relation-valued table attributes.

- Implemented array-valued attributes and RDB_create_array_type().

- Removed the libname argument from RDB_implement_type(). Selectors,
  getters, and setters are now created using RDB_create_ro_op() and
  RDB_create_update_op().

- Removed RDB_select_obj() and RDB_selector(). Use RDB_call_ro_op() and
  RDB_user_op() instead.

- Removed RDB_create_env().

- Implemented duro::table attrs.

- Implemented RDB_get_dbs() and duro::env dbs.

- Changed semantics of duro::operator create.

- Implemented GUI admin tool.

- duro::insert now raises an error if the tuple is already an element of the
  table.

- duro::array index and duro:array foreach now take a
  transaction argument.

- Durotcl functions now set errorCode.

- Added support for user-defined types in Durotcl through duro::type.

- Added tuple operations and relation literals to the expression parser.

- Fixed WRAP syntax.

- Fixed charset handling of Durotcl expressions.

- Fixed several other bugs.

Changes for Duro 0.7

- Tcl interface, including evaluation of relational expressions in
  Tutorial D syntax. A C interface for expression parsing is provided.

- Implemented RDB_sdivide().

- Implemented tuple-valued table attributes, RDB_wrap(), and RDB_unwrap().

- Implemented RDB_remove().

- Implemented insert into projections.

- Added support for multiplication, division, unary minus, and string
  concatenation in expressions.

- Added RDB_table_to_obj() and RDB_obj_table().

- Renamed RDB_obj_set_XXX() to RDB_XXX_to_obj() and RDB_expr_table() to
  RDB_table_to_expr().

- Dropped RDB_tuple and RDB_array, using RDB_object instead. Renamed
  RDB_array_get_tuple() as RDB_array_get().

- Replaced RDB_make_persistent() by RDB_add_table().

- Fixed bug in RDB_extract_tuple().

- Fixed bug with updating key attributes of tables with more than one
  candidate key.

- Fixed problem with commit/rollback after dropping tables.

- Now using to BerkeleyDB 4.2 (no modifications were required)

Changes for Duro 0.6

- For the sake of uniformity, changed argument order of RDB_table_to_array()

- RDB_array_get_tuple() now obtains a pointer to a RDB_tuple.

- Added sorting (through the seqitc/seqitv arguments of
  RDB_table_to_array())

- Renamed RDB_value as RDB_object. Renamed RDB_init_value() as
  RDB_init_obj(), etc.

- RDB_drop_type now takes a RDB_transaction * argument

- More API changes. A draft API spec is now available.

- Replaced structure RDB_key_attrs by the more general RDB_string_vec.

- Implemented user-defined operators.

- Added support for default table attributes.

- Fixed issue with RDB_update().

- Added error logging.

- RDB_get_table now takes a RDB_transaction * argument.

- Implemented user-defined types.

- Renamed field "type" in RDB_attr as "typ", for the sake of uniformity.

Changes for Duro 0.5

- Added RDB_extract_tuple() to extract a single tuple from a table.

- Bugfixes

- Added regular expression matching (requires POSIX.2 regular expressions)

- Added argument 'options' to RDB_create_env().

- Added support for RENAME and SUMMARIZE PER (except COUNTD, SUMD, and AVGD).

- Changed error handling: Implicit rollback also by other system errors
  than deadlock; added function RDB_is_syserr() for checking for system
  errors.

- Renamed RDB_deinit_XXX functions as RDB_destroy_XXX.

- Now checking table and attribute names: nonprintable characters, whitespace,
  and '$' are not permitted.

- Renamed field 'value' in RDB_virtual_attr as 'exp'.

- Made RDB_rel_table() the only way to create a relational expression.

Changes for Duro 0.4

- Persistent virtual tables now supported through RDB_set_table_name()
  and RDB_make_persistent()

- Releasing databases no longer required before closing the environment

- Added operators < > <= >=

- RDB_init_value(), RDB_init_array(), and RDB_init_tuple() do no longer
  return an error code (the error checking, if necessary, is delayed
  to first use of the variable). This makes initialization/deinitialization
  code much simpler.

- Fixed alignment bug

- Added data type BINARY

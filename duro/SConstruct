#
# SCons build file for Duro
#
# $Id$
#

import os

#
# Basic settings
#

bdbhome = ARGUMENTS.get('bdbhome', '/usr/local/BerkeleyDB.4.5')

release = '0.12'

env = Environment(ENV = os.environ)

if env['PLATFORM'] == 'win32':
    default_prefix = 'C:'
else:
    default_prefix = '/usr/local'

prefix = ARGUMENTS.get('prefix', default_prefix)

installdir = prefix + '/duro.' + release

env.Replace(CPPPATH = ['.', bdbhome + '/include'])
env.Replace(LIBPATH = ['.', bdbhome + '/lib'])
env.Replace(YACCFLAGS = '-d')
env.Replace(RPATH = [installdir + '/lib', bdbhome + '/lib'])

if env['PLATFORM'] == 'win32':
    env.Replace(LIBS = ['duro', 'libdb44', 'libltdl'])
    durolibs = ['libdb44', 'libltdl', 'libregex']
else:
    env.Replace(LIBS = ['duro', 'db', 'ltdl', 'm'])
    durolibs = ['db', 'ltdl']

if (os.environ.has_key('CFLAGS')):
    env.Replace(CCFLAGS = os.environ['CFLAGS'])

env.Replace(TARFLAGS = '-c -z --exclude .sconsign')

#
# Duro core library
#

if env.has_key('YACC'):
    CFile('dli/exparse.c', 'dli/exparse.y')
    CFile('dli/exlex.c', 'dli/exlex.l')

gensrc = ['gen/hashmap.c', 'gen/hashmapit.c',
        'gen/strfns.c', 'gen/hashtable.c', 'gen/hashtabit.c']

recsrc = ['rec/cursor.c', 'rec/env.c', 'rec/index.c', 'rec/recmap.c']

relsrc = ['rel/array.c', 'rel/database.c', 'rel/operator.c',
        'rel/builtinops.c', 'rel/expression.c', 'rel/qresult.c',
        'rel/serialize.c', 'rel/table.c', 'rel/stable.c', 'rel/vtable.c',
        'rel/update.c', 'rel/insert.c', 'rel/contains.c', 'rel/transaction.c',
        'rel/delete.c', 'rel/tuple.c', 'rel/type.c', 'rel/object.c',
        'rel/catalog.c', 'rel/optimize.c', 'rel/transform.c',
        'rel/constraint.c', 'rel/assign.c', 'rel/excontext.c',
        'rel/match.c']

dlisrc = ['dli/exparse.c', 'dli/exlex.c', 'dli/parse.c', 'dli/tabletostr.c']

durosrc = gensrc + recsrc + relsrc + dlisrc

if env['PLATFORM'] == 'win32':
    duroccflags = '/DNO_DLL_IMPORT'
    libduro = env.SharedLibrary('duro', durosrc + ['duro.def'],
            LIBS = durolibs, CCFLAGS = duroccflags)
else:
    duroccflags = env['CCFLAGS']
    libduro = env.SharedLibrary('duro', durosrc,
            LIBS = durolibs, CCFLAGS = duroccflags)

#
# Tcl interface
#

durotclsrc = ['tcl/duro.c', 'tcl/envcmd.c',
        'tcl/txcmd.c', 'tcl/tablecmd.c', 'tcl/dbcmd.c', 'tcl/arraycmd.c',
        'tcl/opcmd.c', 'tcl/exprcmd.c', 'tcl/typecmd.c', 'tcl/indexcmd.c',
        'tcl/insertcmd.c', 'tcl/updatecmd.c', 'tcl/constrcmd.c',
        'tcl/massigncmd.c']

libdurotcllibs = ['duro']

if env['PLATFORM'] == 'win32':
    libdurotcllibs += ['tcl84', 'libdb44']
    libdurotcl = env.SharedLibrary('durotcl', durotclsrc + ['durotcl.def'],
            LIBS = libdurotcllibs)
else:
    libdurotcl = env.SharedLibrary('durotcl', durotclsrc,
            LIBS = libdurotcllibs)

#
# Defaults
#

Default(libduro)
Default(libdurotcl)

env.Alias('libduro', libduro)

#
# Tests
#

testenv = env.Copy(RPATH = [bdbhome + '/lib'])

testsrc = Split('tests/tupletest.c tests/maptest.c '
        'tests/prepare.c tests/test_aggregate.c '
        'tests/test_binary.c tests/test_create_view.c '
        'tests/test_defpointtype.c tests/test_deftype.c '
        'tests/test_delete.c tests/test_extend.c '
        'tests/test_union.c tests/test_minus.c '
        'tests/test_intersect.c tests/test_join.c '
        'tests/test_keys.c tests/test_null.c '
        'tests/test_pointtable.c tests/test_print_view.c '
        'tests/test_project.c tests/test_ra.c '
        'tests/test_regexp.c tests/test_rename.c tests/test_select.c '
        'tests/test_summarize.c tests/test_update.c tests/test_utypetable.c '
        'tests/test_srupdate.c tests/test_insert.c tests/test_2db.c '
        'tests/test_defop.c tests/test_callop.c '
        'tests/test_print_opview.c tests/test_dropop.c tests/test_lupdate.c')

testlibsrc = ['tests/point.c', 'tests/point.def', 'tests/plus.c',
        'tests/plus.def']

testbins = []
for s in testsrc:
    testbins.append(testenv.Program(s))

testbins.append(testenv.Program('util/lstables.c'))

if env['PLATFORM'] == 'win32':
    testbins.append(testenv.SharedLibrary(['tests/point.c', 'tests/point.def']))
else:
    testbins.append(testenv.SharedLibrary(['tests/point.c']))

if env['PLATFORM'] == 'win32':
    testbins.append(testenv.SharedLibrary(['tests/plus.c', 'tests/plus.def']))
else:
    testbins.append(testenv.SharedLibrary(['tests/plus.c']))

test_scripts = Split('tests/aggr.test tests/constraints.test tests/convert.test '
        'tests/ctests.test tests/db2.test tests/deedum.test tests/index.test '
        'tests/invtable.test tests/ltables.test tests/massign.test '
        'tests/oindex.test tests/operator.test tests/opt.test '
        'tests/parse.test tests/project.test tests/qqueries.test '
        'tests/rel.test tests/rollback.test tests/rtables.test '
        'tests/sdivide.test tests/string.test tests/subset.test '
        'tests/tuple.test tests/update.test tests/utype.test '
        'tests/vtables.test tests/all.tcl tests/testutil.tcl tests/setup.tcl')

#
# Installation
#

gen_hdrs = Split('gen/hashmap.h gen/hashmapit.h gen/hashtable.h '
        'gen/hashtabit.h gen/strfns.h gen/types.h')
rec_hdrs = Split('rec/cursor.h rec/env.h rec/index.h rec/recmap.h')
rel_hdrs = Split('rel/rdb.h rel/typeimpl.h')
rel_ihdrs = Split('rel/catalog.h rel/delete.h rel/serialize.h '
        'rel/insert.h rel/transform.h rel/internal.h '
        'rel/optimize.h rel/update.h rel/qresult.h')
dli_hdrs = ['dli/parse.h']
dli_ihdrs = ['dli/exparse.h', 'dli/tabletostr.h']
durotcl_hdrs = ['tcl/duro.h']
testlib_hdrs = ['tests/point.h']

tcltools = ['tcl/duroadmin.tcl', 'tcl/durodump.tcl']

env.Alias('install', installdir)

env.Install(installdir + '/include/gen', gen_hdrs)
env.Install(installdir + '/include/rec', rec_hdrs)
env.Install(installdir + '/include/rel', rel_hdrs)
env.Install(installdir + '/include/dli', dli_hdrs)
env.Install(installdir + '/bin', tcltools)

if env['PLATFORM'] == 'win32':
    env.Install(installdir + '/bin', libduro)
else:
    env.Install(installdir + '/lib', libduro)

dst_libdurotcl = env.Install(installdir + '/lib', libdurotcl)
dst_utiltcl = env.Install(installdir + '/lib', 'tcl/util.tcl')

env.Command(installdir + '/lib/pkgIndex.tcl',
        [dst_libdurotcl, dst_utiltcl],
        [open('.tmp.tcl', 'w').write('pkg_mkIndex ' + installdir + '/lib '
                + libdurotcl[0].path + ' util.tcl'),
        'tclsh .tmp.tcl'])

durodocs = ['docs/api-spec.html', 'docs/expressions.html', 'docs/utils.html']

durotcldocs = Split('docs/tcl/index.html docs/tcl/array.html '
        'docs/tcl/begin.html docs/tcl/call.html '
        'docs/tcl/commit.html docs/tcl/db.html docs/tcl/delete.html '
        'docs/tcl/env.html docs/tcl/expr.html docs/tcl/insert.html '
        'docs/tcl/operator.html docs/tcl/ptable.html docs/tcl/rollback.html '
        'docs/tcl/txdb.html docs/tcl/table.html docs/tcl/update.html '
        'docs/tcl/type.html docs/tcl/indexcmd.html docs/tcl/constraint.html '
        'docs/tcl/massign.html docs/tcl/errorCode.html')

env.Install(installdir + '/docs', durodocs)

env.Install(installdir + '/docs/tcl', durotcldocs)

#
# Tests
#

check = env.Command('tests/passed', [libduro, libdurotcl, testbins],
        'tclsh tests/all.tcl -verbose "{pass error}"',
        ENV = {'LIBDUROTCL' : str(libdurotcl[0]), 'PATH' : os.environ['PATH']})

env.Alias('check', check)

#
# Distribution tarfile
#

if env.has_key('TAR'):
    distdir = 'duro-' + release

    env.Install(distdir, Split('SConstruct README INSTALL README.windows '
            'COPYING AUTHORS CHANGES'))
    env.Install(distdir + '/gen', gensrc)
    env.Install(distdir + '/rec', recsrc)
    env.Install(distdir + '/rel', relsrc)
    env.Install(distdir + '/dli', dlisrc)
    env.Install(distdir + '/tcl', durotclsrc)
    env.Install(distdir + '/docs', durodocs)
    env.Install(distdir + '/docs/tcl', durotcldocs)
    env.Install(distdir, ['duro.def', 'durotcl.def'])
    env.Install(distdir + '/tcl', durotcl_hdrs)
    env.Install(distdir + '/tests', testsrc)
    env.Install(distdir + '/tests', testlibsrc)
    env.Install(distdir + '/util', 'util/lstables.c')
    env.Install(distdir + '/gen', gen_hdrs)
    env.Install(distdir + '/rec', rec_hdrs)
    env.Install(distdir + '/rel', rel_hdrs)
    env.Install(distdir + '/rel', rel_ihdrs)
    env.Install(distdir + '/dli', dli_hdrs)
    env.Install(distdir + '/dli', dli_ihdrs)
    env.Install(distdir + '/tests', testlib_hdrs)
    env.Install(distdir + '/tests', test_scripts)
    env.Install(distdir + '/tcl', tcltools)
    env.Install(distdir + '/dli', ['dli/exparse.y', 'dli/exlex.l'])
    env.Install(distdir + '/tcl', 'tcl/util.tcl')

    disttar = 'duro-' + release + '.tar.gz'

    env.Tar(disttar, distdir)

    env.Alias('dist', disttar)

#
# SCons build file for Duro
#
# $Id$
#

import os

#
# Basic settings
#

bdbhome = '/usr/local/BerkeleyDB.4.4'

env = Environment(ENV = os.environ)

if env['PLATFORM'] == 'win32':
    installdir = 'C:/duro'
else:
    installdir = '/usr/local/duro.0.12'

env.Replace(CPPPATH = ['.', bdbhome + '/include'])
env.Replace(LIBPATH = ['.', bdbhome + '/lib'])
env.Replace(YACCFLAGS = '-d')
env.Replace(RPATH = [installdir + '/lib', bdbhome + '/lib'])

if env['PLATFORM'] == 'win32':
    env.Replace(LIBS = ['duro', 'libdb44', 'libltdl'])
    durolibs = ['libdb44', 'libltdl', 'libregex']
else:
    env.Replace(LIBS = ['duro', 'db', 'ltdl', 'm'])
    durolibs = ['db', 'ltdl']

if (os.environ.has_key('CFLAGS')):
    env.Replace(CCFLAGS = os.environ['CFLAGS'])

#
# Duro core library
#

CFile('dli/exparse.c', 'dli/exparse.y')
CFile('dli/exlex.c', 'dli/exlex.l')

durosrc = ['gen/hashmap.c', 'gen/hashmapit.c',
    'gen/strfns.c', 'gen/hashtable.c', 'gen/hashtabit.c',
    'rec/cursor.c', 'rec/env.c', 'rec/index.c', 'rec/recmap.c',
    'rel/array.c', 'rel/database.c', 'rel/operator.c',
    'rel/builtinops.c', 'rel/expression.c', 'rel/qresult.c',
    'rel/serialize.c', 'rel/table.c', 'rel/stable.c', 'rel/vtable.c',
    'rel/update.c', 'rel/insert.c', 'rel/contains.c', 'rel/transaction.c',
    'rel/delete.c', 'rel/tuple.c', 'rel/type.c', 'rel/object.c',
    'rel/catalog.c', 'rel/optimize.c', 'rel/transform.c',
    'rel/constraint.c', 'rel/assign.c', 'rel/excontext.c',
    'rel/match.c',
    'dli/exparse.c', 'dli/exlex.c', 'dli/parse.c', 'dli/tabletostr.c']

if env['PLATFORM'] == 'win32':
    durosrc.append('duro.def')
    duroccflags = '/DNO_DLL_IMPORT'
else:
    duroccflags = env['CCFLAGS']

libduro = env.SharedLibrary('duro', durosrc,
    LIBS = durolibs, CCFLAGS = duroccflags)

#
# Tcl interface
#

durotclsrc = ['tcl/duro.c', 'tcl/envcmd.c',
        'tcl/txcmd.c', 'tcl/tablecmd.c', 'tcl/dbcmd.c', 'tcl/arraycmd.c',
        'tcl/opcmd.c', 'tcl/exprcmd.c', 'tcl/typecmd.c', 'tcl/indexcmd.c',
        'tcl/insertcmd.c', 'tcl/updatecmd.c', 'tcl/constrcmd.c',
        'tcl/massigncmd.c']

libdurotcllibs = ['duro']

if env['PLATFORM'] == 'win32':
        durotclsrc.append('durotcl.def')
        libdurotcllibs += ['tcl84', 'libdb44']

libdurotcl = env.SharedLibrary('durotcl', durotclsrc, LIBS = libdurotcllibs)

#
# Defaults
#

Default(libduro)
Default(libdurotcl)

#
# Tests
#

testenv = env.Copy(RPATH = [bdbhome + '/lib'])

testbins = [testenv.Program('util/lstables.c'),
    testenv.Program('tests/tupletest.c'),
    testenv.Program('tests/maptest.c'),
    testenv.Program('tests/prepare.c'),
    testenv.Program('tests/test_aggregate.c'),
    testenv.Program('tests/test_binary.c'),
    testenv.Program('tests/test_create_view.c'),
    testenv.Program('tests/test_defpointtype.c'),
    testenv.Program('tests/test_deftype.c'),
    testenv.Program('tests/test_delete.c'),
    testenv.Program('tests/test_extend.c'),
    testenv.Program('tests/test_union.c'),
    testenv.Program('tests/test_minus.c'),
    testenv.Program('tests/test_intersect.c'),
    testenv.Program('tests/test_join.c'),
    testenv.Program('tests/test_keys.c'),
    testenv.Program('tests/test_null.c'),
    testenv.Program('tests/test_pointtable.c'),
    testenv.Program('tests/test_print_view.c'),
    testenv.Program('tests/test_project.c'),
    testenv.Program('tests/test_ra.c'),
    testenv.Program('tests/test_regexp.c'),
    testenv.Program('tests/test_rename.c'),
    testenv.Program('tests/test_select.c'),
    testenv.Program('tests/test_summarize.c'),
    testenv.Program('tests/test_update.c'),
    testenv.Program('tests/test_utypetable.c'),
    testenv.Program('tests/test_defpointtype.c'),
    testenv.Program('tests/test_pointtable.c'),
    testenv.Program('tests/test_srupdate.c'),
    testenv.Program('tests/test_insert.c'),
    testenv.Program('tests/test_2db.c'),
    testenv.Program('tests/test_defop.c'),
    testenv.Program('tests/test_callop.c'),
    testenv.Program('tests/test_print_opview.c'),
    testenv.Program('tests/test_dropop.c'),

    testenv.SharedLibrary('tests/point.c'),
    testenv.SharedLibrary('tests/plus.c')]

#
# Installation
#

env.Alias('install', installdir)

env.Install(installdir + '/include/gen',
        Split('gen/hashmap.h gen/hashmapit.h gen/hashtable.h '
        'gen/hashtabit.h gen/strfns.h gen/types.h'))
env.Install(installdir + '/include/rec',
    Split('rec/cursor.h rec/env.h rec/index.h rec/recmap.h'))
env.Install(installdir + '/include/rel',
    Split('rel/rdb.h rel/typeimpl.h dli/parse.h'))
env.Install(installdir + '/bin',
        ['tcl/duroadmin.tcl', 'tcl/durodump.tcl'])

env.Install(installdir + '/lib', libduro)
dst_libdurotcl = env.Install(installdir + '/lib', libdurotcl)
dst_utiltcl = env.Install(installdir + '/lib', 'tcl/util.tcl')

env.Command(installdir + '/lib/pkgIndex.tcl',
        [dst_libdurotcl, dst_utiltcl],
        [open('.tmp.tcl', 'w').write('pkg_mkIndex ' + installdir + '/lib '
                + libdurotcl[0].path + ' util.tcl'),
        'tclsh .tmp.tcl'])

env.Install(installdir + '/docs',
        ['docs/api-spec.html', 'docs/expressions.html', 'docs/utils.html'])

env.Install(installdir + '/docs/tcl',
        Split('docs/tcl/index.html docs/tcl/array.html '
                'docs/tcl/begin.html docs/tcl/call.html '
                'docs/tcl/commit.html docs/tcl/db.html docs/tcl/delete.html '
                'docs/tcl/env.html docs/tcl/expr.html docs/tcl/insert.html '
                'docs/tcl/operator.html docs/tcl/ptable.html docs/tcl/rollback.html '
                'docs/tcl/txdb.html docs/tcl/table.html docs/tcl/update.html '
                'docs/tcl/type.html docs/tcl/indexcmd.html docs/tcl/constraint.html '
                'docs/tcl/massign.html docs/tcl/errorCode.html'))

check = env.Command('tests/passed', [libduro, libdurotcl, testbins],
        "tests/all.tcl -verbose '{pass error}'")

env.Alias('check', check)
